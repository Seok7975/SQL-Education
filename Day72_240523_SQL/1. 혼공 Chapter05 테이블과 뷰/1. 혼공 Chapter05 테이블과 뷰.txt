테이블(table)은 표 형태로 구성된 2차원 구조로, 행과 열로 구성되어 있다. 행은 로우(row)나 레코드(record)라고 부르며, 열은 컬럼(column)또는 필드(field)라고 부른다.

데이터베이스 생성하기

naver_db 데이터 베이스를 GUI로 생성해 보시오.
CREATE DATABASE naver_db;

workbench에서 SQL로 만든 데이터베이스는 화면에 바로 적용되지 않기 때문에 [SCHEMAS] 패널에 보이지 않는다. [SCHEMAS] 패널의
빈 곳에서 마우스 오른쪽 버튼을 클릭하고 [Refresh All]을 선택한다.

DROP DATABASE naver_db를 입력하면 데이터베이스를 삭제할 수 있다.

테이블 생성하기

회원(member) 테이블을 다음의 내용으로 GUI로 생성해 보시오.

열 이름(한글)	열 이름(영문)	데이터 형식	널 허용안함(Not Null)	기타
아이디		mem_id		CHAR(8)		Yes			기본 키(PK)
회원 이름		mem_name	VARCHAR(10)	Yes			
인원 수		mem_number	TINYINT		Yes
주소		addr		CHAR(2)		Yes
연락처 국번	phone1		CHAR(3)		No
전화번호		phone2		CHAR(8)		No			
평균 키		height		TINYINT		No			UNSIGNED
데뷔 일자		debut_date	DATE		No

구매(buy) 테이블을 다음의 내용으로 GUI로 생성해 보자.

열 이름(한글)	열 이름(영문)	데이터 형식	널 허용 안 함		기타
순번		num		INT		YES			기본 키(PK), 자동 증가
아이디		mem_id		CHAR(8)		YES			외래 키(FK)
제품 이름		prod_name	CHAR(6)		YES
분류		group_name	CHAR(4)		NO
가격		price		INT		YES			UNSIGNED
수량		amount		SMALLINT	YES			UNSIGNED



################################################################################

CREATE TABLE `naver_db`.`buy` (
  `num` INT NOT NULL AUTO_INCREMENT,
  `mem_id` CHAR(8) NOT NULL,
  `prod_name` CHAR(6) NOT NULL,
  `group_name` CHAR(4) NULL,
  `price` INT UNSIGNED NOT NULL,
  `amout` SMALLINT NOT NULL,
  PRIMARY KEY (`num`),
FOREIGN KEY(mem_id) REFERENCES member(mem_id)
);

################################################################################

참고
워크벤치에서 테이블 쿼리 보기
Schemas 탭에서 테이블 선택 - 마우스 오른쪽 클릭 - Table Inspector - DDL

생성된 외래 키는 [SCHEMAS] 패널에서 확인할 수 있다.

GUI로 데이터 입력하기

1. MySQL Workbench에서 회원 테이블에 데이터를 입력해 보자. [SCHEMAS] 패널에서 [naver_db] - [Tables] - 
[member]를 선택하고 마우스 오른쪽 버튼을 클릭한 후 [Select Rows - Limit 1000]을 선택한다.

2. Insert new row 아이콘을 클릭하고 '네이버 쇼핑 DB 구성도'의 값을 3개 행만 입력한다. 입력이 완료되었으면
우측 하단에서 [Apply]와 [Finish] 버튼을 차례대로 클릭하여 적용 후 [File] - [Close Tab] 메뉴를 실행해서 SQL  탭을
종료한다.

'BLK', '블랙핑크', '4', '경남', '055', '22222222', '163', '2016-03-03'
'TWC', '트와이스', '9', '서울', '02', '11111111', '167', '2015-10-19'
'WMN', '여자친구', '6', '경기', '031', '33333333', '166', '2015-01-15'

3. 이번에는 구매 테이블의 데이터를 입력해 본다. [SCHEMAS] 패널의 [buy]에서 마우스 오른쪽 버튼을 클릭하고
 [Select Rows - Limit 1000]을 선택한다. Insert new row 아이콘을 클릭하고 '네이버 쇼핑 DB 구성도'의 값을
3개 행만 입력합니다. 입력이 완료되면 우측 하단에서 [APPLY] 버튼을 연속으로 클릭합니다.

'NULL', 'BLK', '지갑', 'NULL', '30', '2'
'NULL', 'BLK', '맥북프로' '디지털', '1000', '1'
'NULL', 'APN', '아이폰', '디지털',  '200', '1'

참고)	입력 시 순번(num) 열은 자동 입력되므로  NULL 값은 그대로 두고 나머지 열만 입력하면 된다.

회원 테이블에 APN(에이핑크)이라는 회원이 없어서 에러가 난다. 일단 [CANCEL] 버튼을 클릭해서 취소한다.
APN 열을 선택하고 [Delete Rows(s)]를 선택하고 [Apply]를 클릭한다.

SQL로 테이블 만들기

데이터베이스 생성하기

쿼리창에서 다음 내용을 실행 합니다.

DROP DATABASE IF EXISTS naver_db;
CREATE DATABASE naver_db;

USE naver_db;
DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id		CHAR(8),
	mem_name 	VARCHAR(10),
	mem_number	TINYINT,
	addr		CHAR(2),
	phone1		CHAR(3),
	phone2		CHAR(8),
	height		TINYINT UNSIGNED,
	debut_date	DATE
);

DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id		CHAR(8) NOT NULL,
	mem_name	VARCHAR(10) NOT NULL,
	mem_number	TINYINT NOT NULL,
	addr		CHAR(2) NOT NULL,
	phone1		CHAR(2) NULL,
	phone2		CHAR(8)	NULL,
	height		TINYINT UNSIGNED NULL,
	debut_date	DATE NULL
);

DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id		CHAR(8) NOT NULL PRIMARY KEY,
	mem_name	VARCHAR(10) NOT NULL,
	mem_number	TINYINT NOT NULL,
	addr		CHAR(2) NOT NULL,
	phone1		CHAR(3) NULL,
	phone2		CHAR(8)	NULL,
	height		TINYINT UNSIGNED NULL,
	debut_date	DATE NULL
);

테이블을 생성한 후에 MySQL Workbench의 [Schemas] 패널에서 [naver_db] - [Tables]를
마우스 오른쪽 버튼으로 클릭하고 [Refresh All]을 선택하면 생성한 테이블을 확인할 수 있다.

DROP TABLE IF EXISTS buy;
CREATE TABLE buy
(
	num	INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	mem_id	CHAR(8) NOT NULL,
	prod_name	CHAR(6) NOT NULL,
	group_name	CHAR(4) NULL,
	price	INT UNSIGNED NOT NULL,
	amount	SMALLINT UNSIGNED NOT NULL
);

AUTO_INCREMENT로 지정한 열은 PRIMARY KEY나 UNIQUE로 꼭 지정해야 한다는 것입니다.

DROP TABLE IF EXISTS buy;
CREATE TABLE buy
(
	num	INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	mem_id	CHAR(8) NOT NULL,
	prod_name CHAR(6) NOT NULL,
	group_name CHAR(4) NULL,
	price 	INT UNSIGNED NOT NULL,
	amount	SMALLINT UNSIGNED NOT NULL,
	FOREIGN KEY(mem_id) REFERENCES member(mem_id)
);

INSERT INTO member VALUES('TWC', '트와이스', 9, '서울', '02', '11111111', 167, '2015-10-19');
INSERT INTO member VALUES('BLK', '블랙핑크', 4, '경남', '055', '22222222', 163, '2016-8-8');
INSERT INTO member VALUES('WMN', '여자친구', 6, '경기', '031', '33333333', 166, '2015-1-15');

DATE로 지정된 열엔는 연, 월, 일 또는 연-월-일 형식으로 값을 입력합니다.

구매 테이블에 3건의 데이터를 입력
INSERT INTO buy VALUES(NULL, 'BLK', '지갑', NULL, 30, 2);
INSERT INTO buy VALUES(NULL, 'BLK', '맥북프로', '디지털', 1000, 1);
INSERT INTO buy VALUES(NULL, 'APN', '아이폰', '디지털', 200, 1);

APN(에이핑크)은 아직 회원 테이블에 존재하지 않아서 오류

제약조건으로 테이블을 견고하게

테이블에는 기본 키, 외래 키와 같은 제약조건을 설정할 수 있다. 제약조건은 테이블을 구성하는 핵심 개념으로,
이를 잘 이해하고 활용하면 데이터의 오류를 줄여 완전무결한 코드를 만들 수 있다.

테이블을 만들 때는 테이블의 구조에 필요한 제약조건을 설정해줘야 합니다. 기본 키(PRIMARY KEY)와 외래 키
(FOREIGN KEY)가 대표적인 제약조건입니다. 기본 키는 학번, 아이디, 사번 등과 같은 고유한 번호를 의미하는
열에 지정합니다.

이메일, 휴대폰과 같이 중복되지 않는 열에는 고유 키(UNIQUE)를 지정할 수 있습니다. 회원의 평균 키는 당연히
200CM를 넘지 않겠죠? 이때 실수로 200을 입력하는 것을 방지하는 제약조건이 체크(CHECK)입니다. 회원 테이블에
국적을 입력한다면 99%는 대한민국일 것입니다. 매번 입력하기 귀찮다면 제약 조건으로 기본값(DEFAULT)을
설정할 수 있습니다. 또한, 값을 꼭 입력해야 하는 NOT NULL 제약조건도 있습니다.

제약조건의 기본 개념과 종류
제약조건(CONSTRAINT)은 데이터의 무결성을 지키기 위해 제한하는 조건입니다. 일단 데이터의 무결성이란
'데이터에 결함이 없음'이란 의미입니다. 간단한 예로 네이버 회원의 아이디가 중복되면 어떤 일이 일어날까요?
이메일, 블로그, 쇼핑 기록 등 상당한 혼란이 일어날 것입니다. 이런 것이 바로 데이터의 결함이고, 이런 결함이
없는 것을 데이터의 무결성이라고 표현합니다.

CREATE TABLE에서 설정하는 기본 키 제약조건

USE naver_db;
DROP TABLE IF EXISTS buy, member;
CREATE TABLE member
(
	mem_id CHAR(8) NOT NULL PRIMARY KEY,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL
);

테이블을 삭제하는 순서
회원 테이블과 구매 테이블은 기본 키-외래 키로 연결되어 있습니다. 즉 회원 테이블의 회원만 구매 테이블에
입력될 수 있습니다. 만약 구매 테이블이 있는데 회원 테이블을 삭제(DROP)하면 어떻게 될까요?
예를 들어, 구매 테이블의 BLK 이름과 연락처를 알고 싶어도 회원 테이블은 이미 삭제되었기 때문에 알 수 있는
방법이 없습니다. 그러므로 기본 키-외래 키 관계로 연결된 테이블은 외래 키가 설정된 테이블을 먼저
삭제해야 합니다.

DESCRIBE member;

DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id CHAR(8) NOT NULL,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL,
	PRIMARY KEY(mem_id)
);


DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id CHAR(8) NOT NULL,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL
);

ALTER TABLE member
	ADD CONSTRAINT
	PRIMARY KEY (mem_id);


기본 키에 이름 지정하기

DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id CHAR(8) NOT NULL,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL,
	constraint PRIMARY KEY PK_member_mem_id(mem_id)
);

외래 키 제약조건
외래 키(Foreign Key) 제약조건은 두 테이블 사이의 관계를 연결해주고, 그 결과 데이터의 무결성을 보장해주는
역할을 합니다. 외래 키가 설정된 열은 꼭 다른 테이블의 기본 키와 연결됩니다.
기본 키가 있는 테이블을 기준 테이블이라고 부르며, 외래 키가 있는 테이블을 참조 테이블이라고 부릅니다.
참조 테이블이 참조하는 기준 테이블의 열은 반드시 기본 키(Primary Key)나, 고유 키(Unique)로 설정되어 있어야
합니다.

CREATE TABLE에서 설정하는 외래 키 제약조건

DROP TABLE IF EXISTS buy, member;
CREATE TABLE member
(
	mem_id	CHAR(8) NOT NULL PRIMARY KEY,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL
);
CREATE TABLE buy
(
	num	INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	mem_id	CHAR(8) NOT NULL,
	prod_name CHAR(6) NOT NULL,
	FOREIGN KEY(mem_id) REFERENCES member(mem_id)
);

기준 테이블의 열 이름과 참조 테이블의 열 이름

'네이버 쇼핑'의 예에서는 기준 테이블의 열 이름(mem_id)과 참조 테이블의 열 이름(mem_id)이 동일합니다. 하지만 꼭
같아야 하는 것은 아닙니다. 즉, 참조 테이블(buy)의 아이디 열 이름이 user_id와 같이 기준 테이블(member)의 mem_id와
달라도 상관없습니다.

DROP TABLE IF EXISTS buy, member;
CREATE TABLE member
(
	mem_id CHAR(8) NOT NULL PRIMARY KEY,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL
);
CREATE TABLE buy
(
	num INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	user_id CHAR(8) NOT NULL,
	prod_name CHAR(6) NOT NULL,
	FOREIGN KEY(user_id) REFERENCES member(mem_id)
);

ALTER TABLE에서 설정하는 외래 키 제약조건

DROP TABLE IF EXISTS buy;
CREATE TABLE buy
(
	num	INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	mem_id	CHAR(8) NOT NULL,
	prod_name CHAR(6) NOT NULL
);
ALTER TABLE buy
	ADD CONSTRAINT
	FOREIGN KEY(mem_id)
	REFERENCES member(mem_id);

INSERT INTO member VALUES('BLK', '블랙핑크', 163);
INSERT INTO buy VALUES(NULL, 'BLK', '지갑');
INSERT INTO buy VALUES(NULL, 'BLK', '맥북');

SELECT M.mem_id, M.mem_name, B.prod_name FROM buy B
		INNER JOIN member M
		ON B.mem_id = M.mem_id;

##################################################

UPDATE member SET mem_id='PINK' WHERE mem_id='BLK';			-- 에러
DELETE FROM member WHERE mem_id='BLK';				-- 에러

##################################################

기준 테이블의 열 이름이 변경될 때 참조 테이블의 열 이름이 자동으로 변경되게
ON UPDATE CASCADE

기준 테이블의 데이터가 삭제되면 참조 테이블의 데이터도 삭제되게
ON DELETE CASCADE

##################################################

DROP TABLE IF EXISTS buy;
CREATE TABLE buy
(
	num	INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	mem_id	CHAR(8) NOT NULL,
	prod_name CHAR(6) NOT NULL
);
ALTER TABLE buy
	ADD CONSTRAINT
	FOREIGN KEY(mem_id)
	REFERENCES member(mem_id)
	ON UPDATE CASCADE
	ON DELETE CASCADE;
INSERT INTO buy VALUES(NULL, 'BLK', '지갑');
INSERT INTO buy VALUES(NULL, 'BLK', '맥북');

UPDATE member SET mem_id='PINK' WHERE mem_id='BLK';

SELECT M.mem_id, M.mem_name, B.prod_name FROM buy B
		INNER JOIN member M
		ON B.mem_id = M.mem_id;

DELETE FROM member WHERE mem_id='PINK';
SELECT * FROM buy;

고유 키 제약조건
고유 키(Unique) 제약조건은 '중복되지 않는 유일한 값'을 입력해야 하는 조건입니다. 이것은 기본 키
제약조건과 거의 비슷하지만, 차이점은 고유 키 제약조건은 NULL 값을 허용한다는 것입니다. NULL
값은 여러 개가 입력되어도 상관없습니다. 또, 기본 키는 테이블에 1개만 설정해야 하지만, 고유 키는
여러 개를 설정해도 됩니다.

DROP TABLE IF EXISTS buy, member;
CREATE TABLE member
(
	mem_id CHAR(8) NOT NULL PRIMARY KEY,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL,
	email CHAR(30) NULL UNIQUE
);

INSERT INTO member VALUES('BLK', '블랙핑크', 163, 'pink@gmail.com');
INSERT INTO member VALUES('TWC', '트와이스', 167, NULL);
INSERT INTO member VALUES('APN', '에이핑크', 164, 'pink@gmail.com');	-- 에러

-- 고유 키로 설정할 열을 NOT NULL로 지정하면 고유 키도 기본 키와 동일하게 중복도 안 되고
비어 있어도 안 됩니다.

체크 제약조건
체크(Check) 제약조건은 입력되는 데이터를 점검하는 기능을 합니다. 예를 들어 평균 키(height)에
마이너스 값이 입력되지 않도록 하거나, 연락처의 국번에 02, 031, 041, 055 중 하나만 입력되도록
할 수 있다.

DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id CHAR(8) NOT NULL PRIMARY KEY,
	mem_name VARCHAR(10) NOT NULL,
	height TINYINT UNSIGNED NULL CHECK(height >= 100),
	phone1 CHAR(3) NULL
);
INSERT INTO member VALUES('BLK', '블랙핑크', 163, NULL);
INSERT INTO member VALUES('TWC', '트와이스', 99, NULL);		-- 에러

ALTER TABLE member ADD CONSTRAINT CHECK(phone1 IN('02', '031', '032', '054', '055', '061'));

INSERT INTO member VALUES('TWC', '트와이스', 167, '02');
INSERT INTO member VALUES('OMY', '오마이걸', 167, '010');		-- 에러

-- IN() 괄호 안에 있는 값 중 하나와 같아야 참이 된다.

기본값 정의
기본값(Default) 정의는 값을 입력하지 않았을 때 자동으로 입력될 값을 미리 지정해 놓는 방법이다.

DROP TABLE IF EXISTS member;
CREATE TABLE member
(
	mem_id	CHAR(8) NOT NULL PRIMARY KEY,
	mem_name VARCHAR(10) NOT NULL,
	height	TINYINT UNSIGNED NULL DEFAULT 160,
	phone1	CHAR(3) NULL
);

ALTER TABLE member ALTER COLUMN phone1 SET DEFAULT '02';

INSERT INTO member VALUES('RED', '레드벨벳', 161, '054');
INSERT INTO member VALUES('SPC', '우주소녀', default, default);
SELECT * FROM member;

-- INSERT INTO member(mem_id, mem_name) VALUES('aaa', '하하하');
-- SELECT * FROM member;

널 값 허용

널(Null) 값을 허용하려면 생략하거나 NULL을 사용하고, 허용하지 않으려면 NOT NULL을 사용합니다.
다만 PRIMARY KEY가 설정된 열에는 NULL 값이 있을 수 없으므로 생략하면 자동으로 NOT NULL로
인식됩니다. NULL 값은 '아무 것도 없다'라는 의미입니다. 공백(' ')이나 0과는 다르다는 점에 주의하세요.

NULL은 빈 값을 허용, NOT NULL은 빈 값을 허용하지 않는다는 의미입니다.

가상의 테이블 : 뷰

뷰는 한 마디로 '가상의 테이블'이라 부릅니다 일반 사용자 입장에서는 테이블과 동일하게 보이기 때문입니다.
그렇다면 테이블이 있는데, 왜 뷰를 사용할까요? 뷰를 사용하면 사용자에게 테이블의 필요한 내용만 보이도록
할 수 있습니다.
뷰(view)는 데이터베이스 개체 중에 하나입니다.
뷰는 테이블처럼 데이터를 가지고 있지는 않습니다. 뷰의 실체는 SELECT 문으로 만들어져 있기 때문에 뷰에 접근하는
순간 SELECT가 실행되고 그 결과가 화면에 출력되는 방식입니다. 뷰는 단순 뷰와 복합 뷰로 나뉘는데, 단순 뷰는 하나의
테이블과 연관된 뷰를 말하고, 복합 뷰는 2개 이상의 테이블과 연관된 뷰를 말합니다.

뷰의 이름만 보고도 뷰인지 알아볼 수 있도록 이름 앞에 v_를 붙이는 것이 일반적입니다.

market_db.sql 실행

USE market_db;
CREATE VIEW v_member
AS
	SELECT mem_id, mem_name, addr FROM member;
SELECT * FROM v_member;

SELECT mem_name, addr FROM v_member
	WHERE addr IN('서울', '경기');

그렇다면 뷰는 수정이 가능할까요? 뷰는 기본적으로 '읽기 전용'으로 사용되지만, 뷰를 통해서 원본 테이블의
데이터를 수정할 수도 있습니다. 하지만 무조건 가능한 것은 아니고 몇 가지 조건을 만족해야 합니다.

뷰를 사용하는 이유
보안(security)에 도움이 됩니다.

복잡한 SQL을 단순하게 만들 수 있습니다.

CREATE VIEW v_memberbuy
AS
	SELECT B.mem_id, M.mem_name, B.prod_name, M.addr,
			CONCAT(M.phone1, M.phone2) '연락처'
		FROM buy B
			INNER JOIN member M
			ON B.mem_id = M.mem_id;

-- 블랙핑크 구매기록 조회
SELECT * FROM v_memberbuy WHERE mem_name = '블랙핑크';

뷰의 실제 작동

뷰의 실제 생성, 수정, 삭제

뷰를 조회할 때는 열 이름에 공백이 있으면 백틱(`)으로 묶어줘야 합니다.

USE market_db;
CREATE VIEW v_viewtest1
AS
	SELECT B.mem_id 'Member ID', M.mem_name As 'Member Name',
		B.prod_name "Product Name",
			CONCAT(M.phone1, M.phone2) AS "Office Phone"
		FROM buy B
			INNER JOIN member M
			ON B.mem_id = M.mem_id;

SELECT DISTINCT `Member ID`, `Member Name` FROM v_viewtest1;

뷰를 생성할 때 뷰의 열 이름을 테이블과 다르게 지정할 수 있으며,
띄어쓰기나 한글도 가능합니다.

뷰의 수정은 ALTER VIEW 구문을 사용하며, 열 이름에 한글을 사용해도 됩니다.

ALTER VIEW v_viewtest1
AS
	SELECT B.mem_id '회원 아이디', M.mem_name AS '회원 이름',
		B.prod_name "제품 이름",
			CONCAT(M.phone1, M.phone2) AS "연락처"
		FROM buy B
			INNER JOIN member M
			ON B.mem_id = M.mem_id;
SELECT DISTINCT `회원 아이디`, `회원 이름` FROM v_viewtest1;

DROP VIEW v_viewtest1;

뷰의 정보 확인
기존에 생성된 뷰에 대한 정보를 확인할 수 있습니다.

USE market_db;
CREATE OR REPLACE VIEW v_viewtest2
AS
	SELECT mem_id, mem_name, addr FROM member;

CREATE OR REPLACE VIEW
뷰를 생성할 때 CREATE VIEW는 기존에 뷰가 있으면 오류가 발생하지만, CREATE OR REPLACE VIEW는
기존에 뷰가 있어도 덮어쓰는 효과를 내기 때문에 오류가 발생하지 않습니다. 즉, DROP VIEW와
CREATE VIEW를 연속으로 작성한 효과를 갖습니다.

DESCRIBE v_viewtest2;
DESC v_viewtest2;

뷰도 테이블과 동일하게 정보를 보여줍니다. 주의할 점은 PRIMARY KEY 등의 정보는 확인되지 않습니다.

SHOW CREATE VIEW 문으로 뷰의 소스 코드도 확인할 수 있습니다.

SHOW CREATE VIEW v_viewtest2;

뷰를 통한 데이터의 수정/삭제

UPDATE v_member SET addr = '부산' WHERE mem_id='BLK';
INSERT INTO v_member(mem_id, mem_name, addr) VALUES('BTS', '방탄소년단', '경기'); -- 에러

v_member(뷰)가 참조하는 member(테이블)의 열 중에서 mem_number 열은 NOT NULL로 설정되어서 반드시
입력해줘야 합니다. 하지만 현재의 v_member에서는 mem_number 열을 차조하고 있지 않으므로 값을 입력할
방법이 없습니다.
만약 v_member 뷰를 통해서 member 테이블에 값을 입력하고 싶다면 v_member에 mem_number 열을
포함하도록 뷰를 재정의하거나, 아니면 member에서 mem_number 열의 속성을 NULL로 바꾸거나, 
기본값(Default)을 지정해야 합니다.

CREATE VIEW v_height167
AS
	SELECT * FROM member WHERE height >= 167;

SELECT * FROM v_height167;

v_height167 뷰에서 키가 167미만인 데이터를 삭제
DELETE FROM v_height167 WHERE height < 167;

결과 메시지
0 row(s) affected

당연히 v_height167 뷰에는 167 미만인 데이터가 없습니다. 그러므로 삭제될 데이터도 없는 것입니다.

뷰를 통한 데이터의 입력
이번에는 v_height167 뷰에서 키가 167미만인 데이터를 입력해보자.
INSERT INTO v_height167 VALUES('TRA', '티아라', 6, '서울', NULL, NULL, 159, '2005-01-01');

일단 입력은 되었습니다. 그런데 생각해보니 약간 이상합니다. v_height167 뷰는 167이상만 보이도록 만든 뷰인데, 167미만인 데이터가 입력되었습니다. 일단 뷰의 데이터를 확인해봅시다. 역시 167이상만 조회가 되므로
방금 전에 입력한 티아라는 보이지 않습니다.

SELECT * FROM v_height167;
-- SELECT * FROM member; -- member를 확인해 보면 들어가 있다.

이번 예를 보면 키가 167이상인 뷰에 키가 159인 데이터를 입력한 것은 별로 바람직해 보이지 않습니다. 즉, 예상치 못한 경로를 통해서 입력되면 안 되는 데이터가 입력된 듯한 느낌입니다. 키가 167이상인 뷰이므로 167이상의 데이터만 입력되도록 하는 것이 논리적으로 바람직합니다.

이럴 때 예약어 WITH CHECK OPTION을 통해 뷰에 설정된 값의 범위가 벗어나는 값은 입력되지 않도록 할 수 있습니다.

ALTER VIEW v_height167
AS
	SELECT * FROM member WHERE height >= 167
		WITH CHECK OPTION;
INSERT INTO v_height167 VALUES('TOB', '텔레토비', 4, '영국', NULL, NULL, 140, '1995-01-01');

이제 키가 167 미만인 데이터는 입력되지 않고, 167이상의 데이터만 입력됩니다. 이러한 방식이 좀 더 합리적입니다.

단순 뷰와 복합 뷰

하나의 테이블로 만든 뷰를 단순 뷰라 하고, 두 개 이상의 테이블로 만든 뷰를 복합 뷰라고 합니다. 복합 뷰는 주로 두 테이블을 조인한 결과를 뷰로 만들 때 사용합니다. 복합 뷰의 예는 다음과 같습니다.

CREATE VIEW v_complex
AS
	SELECT B.mem_id, M.mem_name, B.prod_name, M.addr
		FROM buy B
			INNER JOIN member M
			ON B.mem_id = M.mem_id;

복합 뷰는 읽기 전용입니다. 복합 뷰를 통해 테이블에 데이터를 입력/수정/삭제할 수 없습니다.

뷰가 참조하는 테이블의 삭제
DROP TABLE IF EXISTS buy, member;

현재 여러 개의 뷰가 두 테이블과 관련이 있는데도 테이블이 삭제되었습니다. 두 테이블 중 아무거나 연관되는 뷰를 다시 조회해봅시다.

SELECT * FROM v_height167;

당연히 참조하는 테이블이 없기 때문에 조회할 수 없다는 메시지가 나옵니다. 바람직하지는 않지만, 관련 뷰가 있더라도 테이블은 쉽게 삭제됩니다.

뷰가 조회되지 않으면 CHECK TABLE 문으로 뷰의 상태를 확인해볼 수 있습니다. 뷰가 참조하는 테이블이 없어서 오류가 발생하는 것을 확인할 수 있습니다.

CHECK TABLE v_height167;