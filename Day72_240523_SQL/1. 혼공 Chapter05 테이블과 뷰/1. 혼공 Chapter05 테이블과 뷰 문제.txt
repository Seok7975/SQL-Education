1. naver_db 데이터 베이스를 GUI로 생성해 보시오.
CREATE DATABASE naver_db;

2. 회원(member) 테이블을 다음의 내용으로 GUI로 생성해 보시오.

열 이름(한글)	열 이름(영문)	데이터 형식	널 허용안함(Not Null)	기타
아이디		mem_id		CHAR(8)		Yes			기본 키(PK)
회원 이름		mem_name	VARCHAR(10)	Yes			
인원 수		mem_number	TINYINT		Yes
주소		addr		CHAR(2)		Yes
연락처 국번	phone1		CHAR(3)		No
전화번호		phone2		CHAR(8)		No			
평균 키		height		TINYINT		No			UNSIGNED
데뷔 일자		debut_date	DATE		No

3. 구매(buy) 테이블을 다음의 내용으로 GUI로 생성해 보자.

열 이름(한글)	열 이름(영문)	데이터 형식	널 허용 안 함		기타
순번		num		INT		YES			기본 키(PK), 자동 증가
아이디		mem_id		CHAR(8)		YES			외래 키(FK)
제품 이름		prod_name	CHAR(6)		YES
분류		group_name	CHAR(4)		NO
가격		price		INT		YES			UNSIGNED
수량		amount		SMALLINT	YES			UNSIGNED

4. GUI로 회원(member)테이블에 다음 데이터 입력하기

'BLK', '블랙핑크', '4', '경남', '055', '22222222', '163', '2016-03-03'
'TWC', '트와이스', '9', '서울', '02', '11111111', '167', '2015-10-19'
'WMN', '여자친구', '6', '경기', '031', '33333333', '166', '2015-01-15'

4. 이번에는 구매 테이블에 다음내용을 GUI로 데이터를 입력해 본다.
(회원 테이블에 APN(에이핑크)이라는 회원이 없어서 에러가 난다. 일단 [CANCEL] 버튼을 클릭해서 취소한다.
에러나는 것을 확인 한후에 위에 두 개의 열만을 입력한다.)

'NULL', 'BLK', '지갑', 'NULL', '30', '2'
'NULL', 'BLK', '맥북프로' '디지털', '1000', '1'
'NULL', 'APN', '아이폰', '디지털',  '200', '1'

5. 위에서 
'NULL', 'APN', '아이폰', '디지털',  '200', '1' 
내용을 입력하면 에러가 나는 이유는?

다음 내용부터는 쿼리창에서 SQL로 작성하자.
6. naver_db 데이터 베이스가 있으면 삭제하자.
naver_db 데이터 베이스를 만들자.

7. naver_db에 다음 테이블을 만들자.
member 테이블이 있으면 삭제하자.
2번에서 만든 member 테이블을 만들자.

8. 구매(buy) 테이블이 있으면 삭제하자.
3번에서 만든 구매(buy)테이블을 만들자.

9.  다음 내용을 회원(member) 테이블에 넣자.
'BLK', '블랙핑크', '4', '경남', '055', '22222222', '163', '2016-03-03'
'TWC', '트와이스', '9', '서울', '02', '11111111', '167', '2015-10-19'
'WMN', '여자친구', '6', '경기', '031', '33333333', '166', '2015-01-15'

10. 다음 내용을 구매(buy) 테이블에 넣자.
(APN(에이핑크)은 아직 회원 테이블에 존재하지 않아서 오류)

NULL, 'BLK', '지갑', NULL, '30', '2'
NULL, 'BLK', '맥북프로', '디지털', '1000', '1'
NULL, 'APN', '아이폰', '디지털',  '200', '1'


11. 다음 내용 읽어보기

제약조건으로 테이블을 견고하게

테이블에는 기본 키, 외래 키와 같은 제약조건을 설정할 수 있다. 제약조건은 테이블을 구성하는 핵심 개념으로,
이를 잘 이해하고 활용하면 데이터의 오류를 줄여 완전무결한 코드를 만들 수 있다.

테이블을 만들 때는 테이블의 구조에 필요한 제약조건을 설정해줘야 합니다. 기본 키(PRIMARY KEY)와 외래 키
(FOREIGN KEY)가 대표적인 제약조건입니다. 기본 키는 학번, 아이디, 사번 등과 같은 고유한 번호를 의미하는
열에 지정합니다.

이메일, 휴대폰과 같이 중복되지 않는 열에는 고유 키(UNIQUE)를 지정할 수 있습니다. 회원의 평균 키는 당연히
200CM를 넘지 않겠죠? 이때 실수로 200을 입력하는 것을 방지하는 제약조건이 체크(CHECK)입니다. 회원 테이블에
국적을 입력한다면 99%는 대한민국일 것입니다. 매번 입력하기 귀찮다면 제약 조건으로 기본값(DEFAULT)을
설정할 수 있습니다. 또한, 값을 꼭 입력해야 하는 NOT NULL 제약조건도 있습니다.

제약조건의 기본 개념과 종류
제약조건(CONSTRAINT)은 데이터의 무결성을 지키기 위해 제한하는 조건입니다. 일단 데이터의 무결성이란
'데이터에 결함이 없음'이란 의미입니다. 간단한 예로 네이버 회원의 아이디가 중복되면 어떤 일이 일어날까요?
이메일, 블로그, 쇼핑 기록 등 상당한 혼란이 일어날 것입니다. 이런 것이 바로 데이터의 결함이고, 이런 결함이
없는 것을 데이터의 무결성이라고 표현합니다.

12.  naver_db 선택
구매(buy), 멤버(member) 테이블이 있으면 삭제한다.
다음 내용으로 member 테이블을 만든다.
mem_id CHAR(8) NULL 허용안함 기본키
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만

멤버 테이블 구조 보기

참고 테이블을 삭제하는 순서
회원 테이블과 구매 테이블은 기본 키-외래 키로 연결되어 있습니다. 즉 회원 테이블의 회원만 구매 테이블에
입력될 수 있습니다. 만약 구매 테이블이 있는데 회원 테이블을 삭제(DROP)하면 어떻게 될까요?
예를 들어, 구매 테이블의 BLK 이름과 연락처를 알고 싶어도 회원 테이블은 이미 삭제되었기 때문에 알 수 있는
방법이 없습니다. 그러므로 기본 키-외래 키 관계로 연결된 테이블은 외래 키가 설정된 테이블을 먼저
삭제해야 합니다.

13. 회원(member) 테이블이 있으면 삭제한다.
다음 내용으로 member 테이블을 만든다.
mem_id CHAR(8) NULL 허용안함
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만

테이블을 만든 후 mem_id를 기본키로 추가한다.

14. 회원(member) 테이블이 있으면 삭제한다.
다음 내용으로 member 테이블을 만든다.

mem_id CHAR(8) NULL 허용안함
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만
mem_id에 PK_member_mem_id라는 제약 조건 이름을 주면서
기본키로 하자.


15. 외래 키 제약조건
외래 키(Foreign Key) 제약조건은 두 테이블 사이의 관계를 연결해주고, 그 결과 데이터의 무결성을 보장해주는
역할을 합니다. 외래 키가 설정된 열은 꼭 다른 테이블의 기본 키와 연결됩니다.
기본 키가 있는 테이블을 기준 테이블이라고 부르며, 외래 키가 있는 테이블을 참조 테이블이라고 부릅니다.
참조 테이블이 참조하는 기준 테이블의 열은 반드시 기본 키(Primary Key)나, 고유 키(Unique)로 설정되어 있어야
합니다.

16. 구매(buy), 회원(member) 테이블이 있으면 삭제한다.

다음 내용으로 회원(member) 테이블을 만든다.

mem_id CHAR(8) NULL 허용안함 기본키
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만

17. 다음 내용으로 구매 테이블(buy)을 만든다.
num int 자동증가 NULL 허용안함 기본키
mem_id CHAR(8) NULL 허용안함
prod_name CHAR(6) NULL 허용안함
외부키 mem_id member테이블에 mem_id 참조


18. '네이버 쇼핑'의 예에서는 기준 테이블의 열 이름(mem_id)과 참조 테이블의 열 이름(mem_id)이 동일합니다. 하지만 꼭
같아야 하는 것은 아닙니다. 즉, 참조 테이블(buy)의 아이디 열 이름이 user_id와 같이 기준 테이블(member)의 mem_id와
달라도 상관없습니다.

19. 구매(buy), 회원(member)테이블이 있으면 삭제
다음 내용으로 회원(member) 테이블을 만든다.

mem_id CHAR(8) NULL 허용안함 기본키
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만

다음 내용으로 구매 테이블(buy)을 만든다.
num INT 자동증가 NULL 허용안함 기본키
user_id CHAR(8) NULL 허용안함
prod_name CHAR(6) NULL 허용안함
외부키 user_id member테이블에 mem_id 참조

20. 구매(buy) 테이블이 존재하며 삭제한다.
구매(buy) 테이블을 다음 내용으로 만든다.

num INT 자동증가 NULL 허용안함 기본키
mem_id CHAR(8) NULL 허용안함
prod_name CHAR(6) NULL 허용안함

테이블을 만든후
구매(buy) 테이블의 mem_id를 회원(member)테이블의 mem_id를 참조하는
외부키로 만든다.

다음 내용을 회원(member)테이블에 추가한다.
'BLK', '블랙핑크', 163
다음 내용을 구매(buy) 테이블에 추가한다.
NULL, 'BLK', '지갑'
NULL, 'BLK', '맥북'

구매(buy) 테이블과 회원(member) 테이블의 아이디가 같은 것들의
회원 테이블의 회원 아이디(mem_id), 회원테이블의 회원 이름(mem_name),
구매 테이블의 제품이름(prod_name)을 출력하시오.

21. 회원(member) 테이블의 mem_id가 'BLK' 인것의 mem_id를 PINK로 수정하시오.
(에러난다)
22. 회원(member) 테이블의 mem_id가 'BLK' 인것을 삭제하시오.
(에러난다.)

23. 구매(buy) 테이블이 있으면 삭제한다.
구매(buy) 테이블을 다음 내용으로 만든다.

num INT 자동증가 NULL 허용안함 기본키
mem_id CHAR(8) NULL 허용안함
prod_name CHAR(6) NULL 허용안함

테이블을 만든후
구매(buy) 테이블의 mem_id를 회원(member)테이블의 mem_id를 참조하는
외부키로 만드는데, 참조하는 테이블의 아이디가 바뀌면 같이 수정되게,
참조하는 테이블의 아이디가 삭제되면 행이 같이 삭제되게 하자.

구매 테이블에 다음 내용을 넣자.
NULL, 'BLK', '지갑'
NULL, 'BLK', '맥북'

회원(member) 테이	블의 mem_id가 'BLK' 인것의 mem_id를 'PINK'로 수정

구매(buy) 테이블과 회원(member) 테이블의 아이디가 같은 것들의
회원 테이블의 회원 아이디(mem_id), 회원테이블의 회원 이름(mem_name),
구매 테이블의 제품이름(prod_name)을 출력하시오.

회원(member) 테이블의 mem_id가 'PINK'인 것을 삭제하시오.
구매(buy) 테이블의 모든 정보를 출력하시오.

24. 고유 키 제약조건
고유 키(Unique) 제약조건은 '중복되지 않는 유일한 값'을 입력해야 하는 조건입니다. 이것은 기본 키
제약조건과 거의 비슷하지만, 차이점은 고유 키 제약조건은 NULL 값을 허용한다는 것입니다. NULL
값은 여러 개가 입력되어도 상관없습니다. 또, 기본 키는 테이블에 1개만 설정해야 하지만, 고유 키는
여러 개를 설정해도 됩니다.

25. 구매(buy), 회원(member) 테이블이 있으면 삭제한다.
다음 내용으로 회원(member) 테이블을 만든다.

mem_id CHAR(8) NULL 허용안함 기본키
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만
email CHAR(30) 고유키

다음 내용을 회원(member) 테이블에 넣는다.
'BLK', '블랙핑크', 163, 'pink@gmail.com'
'TWC', '트와이스', 167, NULL
'APN', '에이핑크', 164, 'pink@gmail.com'

마지막 열을 입력하려고 할 때 에러가 난다.
이메일은 고유키이기 때문에 중복되면 안되기 때문이다.
-- 고유 키로 설정할 열을 NOT NULL로 지정하면 고유 키도 기본 키와 동일하게 중복도 안 되고
비어 있어도 안 됩니다.

26. 체크 제약조건
체크(Check) 제약조건은 입력되는 데이터를 점검하는 기능을 합니다. 예를 들어 평균 키(height)에
마이너스 값이 입력되지 않도록 하거나, 연락처의 국번에 02, 031, 041, 055 중 하나만 입력되도록
할 수 있다.

27. 멤버 테이블이 존재하면 삭제한다.
다음 내용으로 회원(member) 테이블을 만든다.

mem_id CHAR(8) NULL 허용안함 기본키
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만, 키는 100이상만 입력되게
phone1 CHAR(3)

다음 내용을 회원(member) 테이블에 넣는다.

'BLK', '블랙핑크', 163, NULL
'TWC', '트와이스', 99, NULL

두 번째 내용을 넣었을 때 키가 99가 안되므로 에러가 난다.
에러가 나는 것을 확인하자.

28. 회원(member) 테이블에  phone1에 다음 번호 중 하나만 입력받을 수 있게 제약조건을 추가하자.

29. 회원(member) 테이블에 다음 내용을 넣자.
'TWC', '트와이스', 167, '02'
'OMY', '오마이걸', 167, '010'

두번째 내용을 넣을 때 전화번호에 '010'이 들어가서 에러가 난다.
에러가 나는 것을 확인하자.

30. 기본값 정의
기본값(Default) 정의는 값을 입력하지 않았을 때 자동으로 입력될 값을 미리 지정해 놓는 방법이다.

31.  회원(member) 테이블이 있으면 삭제하자.
다음 내용으로 회원(member) 테이블을 만들자.
mem_id CHAR(8) NULL 허용안함 기본키
mem_name VARCHAR(10) NULL 허용안함
height TINYINT 양수만, 기본 값 160
phone1 CHAR(3)

32. 회원(member) 테이블에 phone1에 기본 값을 '02'를 주자.

33. 회원(member) 테이블에 다음 내용을 입력하자.
'RED', '레드벨벳', 161, '054'
'SPC', '우주소녀', default, default
member 테이블에 모든 열을 조회하자.
(디폴트 값이 제대로 들어갔는지 확인하자.

[참고]
-- INSERT INTO member(mem_id, mem_name) VALUES('aaa', '하하하');
-- SELECT * FROM member;

널 값 허용

널(Null) 값을 허용하려면 생략하거나 NULL을 사용하고, 허용하지 않으려면 NOT NULL을 사용합니다.
다만 PRIMARY KEY가 설정된 열에는 NULL 값이 있을 수 없으므로 생략하면 자동으로 NOT NULL로
인식됩니다. NULL 값은 '아무 것도 없다'라는 의미입니다. 공백(' ')이나 0과는 다르다는 점에 주의하세요.

NULL은 빈 값을 허용, NOT NULL은 빈 값을 허용하지 않는다는 의미입니다.

34. 가상의 테이블 : 뷰

뷰는 한 마디로 '가상의 테이블'이라 부릅니다 일반 사용자 입장에서는 테이블과 동일하게 보이기 때문입니다.
그렇다면 테이블이 있는데, 왜 뷰를 사용할까요? 뷰를 사용하면 사용자에게 테이블의 필요한 내용만 보이도록
할 수 있습니다.
뷰(view)는 데이터베이스 개체 중에 하나입니다.
뷰는 테이블처럼 데이터를 가지고 있지는 않습니다. 뷰의 실체는 SELECT 문으로 만들어져 있기 때문에 뷰에 접근하는
순간 SELECT가 실행되고 그 결과가 화면에 출력되는 방식입니다. 뷰는 단순 뷰와 복합 뷰로 나뉘는데, 단순 뷰는 하나의
테이블과 연관된 뷰를 말하고, 복합 뷰는 2개 이상의 테이블과 연관된 뷰를 말합니다.

뷰의 이름만 보고도 뷰인지 알아볼 수 있도록 이름 앞에 v_를 붙이는 것이 일반적입니다.

35. market_db.sql 을 열어서 안에 있는 SQL을 실행하자.

36. market_db 선택
회원(member) 테이블의 mem_id, mem_name, addr을 가지고 v_member라는 이름의
view를 만들자.
v_member에 있는 모든 내용을 조회하자.
v_member 뷰에서 주소가 서울이거나 경기인 것들의 mem_name, addr을 출력하자.

37. 그렇다면 뷰는 수정이 가능할까요? 뷰는 기본적으로 '읽기 전용'으로 사용되지만, 뷰를 통해서 원본 테이블의
데이터를 수정할 수도 있습니다. 하지만 무조건 가능한 것은 아니고 몇 가지 조건을 만족해야 합니다.

38. 뷰를 사용하는 이유
보안(security)에 도움이 됩니다.
복잡한 SQL을 단순하게 만들 수 있습니다.

39. 구매(buy) 테이블과 회원(member) 테이블의 아이디가 같은 것들의 구매 테이블의 mem_id
회원테이블의 mem_name, 구매 테이블의 prod_name, 회원 테이블의 addr,
회원 테이블의 phone1과 phone2를 합쳐서 '연락처'라는 별명으로 하여 v_memberbuy라는 이름의
뷰를 만든다.

40. v_memberbuy 뷰에 회원이름(mem_name)이 '블랙핑크'인 것의 모든 열을 조회하자.

41. 뷰를 조회할 때는 열 이름에 공백이 있으면 백틱(`)으로 묶어줘야 합니다.
market_db 선택
구매(buy) 테이블의 mem_id와 회원(member) 테이블의 mem_id가 같은 것들의
구매 테이블의 mem_id를 'Member ID'라는 이름으로, 회원 테이블의 mem_name을
'Member Name'이라는 이름으로, 구매 테이블의 prod_name을 'Product Name'이라는 이름으로,
회원 테이블의 phone1과 phone2 합친것을 'Office Phone'이라는 이름으로 v_viewtest1이라는 뷰를 만든다.

v_viewtest1 뷰의 중복된 열을 제거하고 'Member ID'와 Member Name'을 조회하자.

42. 구매(buy) 테이블의 mem_id와 회원(member) 테이블의 mem_id가 같은 것들의
구매 테이블의 mem_id를 '회원 아이디'라는 이름으로, 회원 테이블의 mem_name을
'회원 이름'이라는 이름으로, 구매 테이블의 prod_name을 '제품 이름'이라는 이름으로,
회원 테이블의 phone1과 phone2 합친것을 '연락처'이라는 이름으로 v_viewtest1이라는 뷰를 수정한다.

v_viewtest1 뷰의 중복된 열을 제거하고 '회원 아이디'와 '회원 이름'을 조회하자.

43. v_viewtest1 뷰를 삭제한다.

44. market_db를 선택한다.
회원 테이블로 부터 mem_id, mem_name, addr을 가지고 v_viewtest2라는 뷰가 없으면 만들고,
있다면 대체한다.

45. 다음 설명하는 내용은?
뷰를 생성할 때 CREATE VIEW는 기존에 뷰가 있으면 오류가 발생하지만, (               )는
기존에 뷰가 있어도 덮어쓰는 효과를 내기 때문에 오류가 발생하지 않습니다. 즉, DROP VIEW와
CREATE VIEW를 연속으로 작성한 효과를 갖습니다.

46. v_viewtest2의 구조를 확인하자.

47. v_viewtest2를 만든 소스코드를 확인하자.

SHOW CREATE VIEW v_viewtest2;

48. v_member 뷰의 mem_id가 'BLK'인 것의 addr을 '부산'으로 수정한다.
49. 다음 쿼리문은 에러가 난다 에러가 나는 이유는?
INSERT INTO v_member(mem_id, mem_name, addr) VALUES('BTS', '방탄소년단', '경기'); -- 에러

50. 회원(member) 테이블에서 키(height)가 167이상인 것들의 모든 열을 가지고 v_height167이라는
뷰를 만들자.
그리고 v_height167의 모든 열을 조회하자.

51. v_height167 뷰에서 키가 167미만인 데이터를 삭제하자.
(당연히 v_height167 뷰에는 167 미만인 데이터가 없습니다. 그러므로 삭제될 데이터도 없는 것입니다.)

52. 이번에는 v_height167 뷰에서 키가 167미만인 다음 데이터를 입력해보자.
'TRA', '티아라', 6, '서울', NULL, NULL, 159, '2005-01-01'

53. 일단 입력은 되었습니다. 그런데 생각해보니 약간 이상합니다. v_height167 뷰는 167이상만 보이도록 만든 뷰인데, 
167미만인 데이터가 입력되었습니다. 일단 뷰의 데이터를 확인해봅시다. 역시 167이상만 조회가 되므로
방금 전에 입력한 티아라는 보이지 않습니다.
v_height167의 모든 열을 조회하자.
(하지만 member 테이블에는 들어가 있다. member 테이블도 조회해 보자.)

54. v_height167 뷰에 키(height)가 167이상만 입력될 수 있게 수정하자.
그리고 다음 데이터를 넣고 에러가 나는 것을 확인하자.
'TOB', '텔레토비', 4, '영국', NULL, NULL, 140, '1995-01-01'

55. 하나의 테이블로 만든 뷰를 단순 뷰라 하고, 두 개 이상의 테이블로 만든 뷰를 복합 뷰라고 합니다. 복합 뷰는 주로 두 테이블을 조인한 결과를 뷰로 만들 때 사용합니다. 

56. 구매(buy) 테이블의 mem_id와 회원(member) 테이블의 mem_id가 같은 것들의
구매 테이블의 mem_id, 회원 테이블의 mem_name, 구매 테이블의 prod_name,
회원 테이블의 addr을 가지고 v_complex라는 이름의 뷰를 만들자.

57. 복합 뷰는 읽기 전용입니다. 복합 뷰를 통해 테이블에 데이터를 입력/수정/삭제할 수 없습니다.

58. 뷰가 참조하는 테이블의 삭제
DROP TABLE IF EXISTS buy, member;

현재 여러 개의 뷰가 두 테이블과 관련이 있는데도 테이블이 삭제되었습니다. 두 테이블 중 아무거나 연관되는 뷰를 다시 조회해봅시다.
SELECT * FROM v_height167;
당연히 참조하는 테이블이 없기 때문에 조회할 수 없다는 메시지가 나옵니다. 바람직하지는 않지만, 관련 뷰가 있더라도 테이블은 쉽게 삭제됩니다.
뷰가 조회되지 않으면 CHECK TABLE 문으로 뷰의 상태를 확인해볼 수 있습니다. 뷰가 참조하는 테이블이 없어서 오류가 발생하는 것을 확인할 수 있습니다.
CHECK TABLE v_height167;