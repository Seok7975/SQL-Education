상관 서브쿼리

SYNTAX EXISTS
EXISTS(SELECT명령)

EXISTS 술어를 사용하면 서브쿼리가 반환하는 결괏값이 있는 지를 조사할 수 있다. 
특히 EXISTS를 사용하는 경우에는 서브쿼리가 반드시 스칼라 값을 반환할 필요는 없다. 
EXISTS는 단지 반환된 행이 있는지를 확인해보고 값이 있으면 
참, 없으면 거짓을 반환하므로 어떤 패턴이라도 상관없다.

EXISTS
서브쿼리를 사용해 검색할 때 '데이터가 존재하는지 아닌지' 판별하기 위해 
조건을 지정할 수도 있다. 이런 경우 EXISTS 술어를 사용해 조사할 수 있다.

#만듬
CREATE TABLE sample551(no int, a char(10));
INSERT INTO sample551 VALUES(1, NULL);
INSERT INTO sample551 VALUES(2, NULL);
INSERT INTO sample551 VALUES(3, NULL);
INSERT INTO sample551 VALUES(4, NULL);
INSERT INTO sample551 VALUES(5, NULL);

#만듬
CREATE TABLE sample552(no2 int);
INSERT INTO sample552 VALUES(3);
INSERT INTO sample552 VALUES(5);

EXISTS를 사용해 '있음'으로 갱신하기
sample551에 no열이 sample552의 no2열과 같은 행이 있으면 a열을 '있음'으로 갱신하기.
UPDATE sample551 SET a = '있음' WHERE 
	EXISTS(SELECT * FROM sample552 WHERE no2 = no);
서브쿼리 부분이 UPDATE의 WHERE 구로 행을 검색할 때마다 차례로 실행되는 느낌이다. 
서브쿼리의 WHERE 구는 no2=no 라는 조건식으로 되어 있다. 
no2는 sampl552의 열이고 no는 sample551의 열이다. 
이때 no가 3과 5일 때만 서브쿼리가 행을 반환한다.
EXISTS 술어에 서브쿼리를 지정하면 서브쿼리가 행을 반환할 경우에 참을 돌려준다. 
결과가 한 줄이라도 그 이상이라도 참이 된다. 
반면 반환되는 행이 없을 경우에는 거짓이 된다.

NOT EXISTS를 사용해 '없음'으로 갱신하기
sample551에 no열이 sample552의 no2열과 같은 행이 아니면 a열을 '없음'으로 갱신하기.
UPDATE sample551 SET a = '없음' WHERE
	NOT EXISTS(SELECT * FROM sample552 WHERE no2 = no);

SELECT * FROM sample551;

'없음'의 경우, 행이 존재하지 않는 상태가 참이 되므로 이때는 NOT EXISTS를 사용한다. 
NOT을 붙이는 것으로 값을 부정할 수 있다.

UPDATE 명령(부모)에서 WHERE 구에 괄호로 묶은 부분이 서브쿼리(자식)가 된다. 
부모 명령에서는 sample551를 갱신한다. 
자식인 서브쿼리에서는 sample552 테이블의 no2 열 값이 
부모의 no 열 값과 일치하는 행을 검색한다. 
이처럼 부모 명령과 자식인 서브쿼리가 특정 관계를 맺는 것을 '상관 서브쿼리'라 부른다.

밑에 설명한 DELETE의 경우에는 상관 서브쿼리가 아니다. 
상관 서브쿼리가 아닌 단순한 서브쿼리로 단독 쿼리로 실행할 수 있다.

DELETE FROM sample54 WHERE a = (SELECT MIN(a) FROM sample54);	# MySQL Error
###
DELETE FROM sample54 WHERE a = (SELECT a FROM (SELECT MIN(a) AS a FROM SAMPLE54) AS x);
###
SELECT MIN(a) FROM sample54;

하지만 상관 서브쿼리에서는 부모 명령과 연관되어 처리되기 때문에 
상관 서브쿼리 부분만을 따로 떼어내어 실행시킬 수 없다.

UPDATE sample551 SET a = '있음' WHERE
	EXISTS(SELECT * FROM sample552 WHERE no2 = no );

SELECT * FROM sample552 WHERE no2 = no;
-> 에러 no가 불명확하다

열에 테이블명 붙이기

SAMPLE551과 SAMPLE552는 각각 열이 no와 no2로 서로 다르기 때문에 
no가 sample551의 열, no2가 sample552의 열인 것을 알 수 있다. 
하지만 만약 두 열이 모두 같은 이름을 가진다면 어떨까? 
'where no = no'라고 조건을 지정하면 제대로 동작할까?
사실은 양쪽 테이블 모두 no라는 열로 되어있다면 잘 동작하지 않는다.
(대부분은 열이 애매하다는 내용의 에러가 발생한다. * 다만 MySQL에서는 
서브쿼리의 'WHERE no = no'는 'WHERE sample552.no = sample552.no'가 되어 조건식은 
항상 참이 된다. 결과적으로 sample551의 모든 행은 a열 값이 있다'로 갱신된다.) 
그래서 여기서는 예제 테이블을 작성할 때 설명하기 쉽도록 의도적으로 열명을 바꾸었다. 
대신 조금 부자연스러울 수도 있겠다. 
같은 데이터라면 같은 이름으로 지정하는 편이 자연스럽다.

UPDATE sample551 SET a = '있음' WHERE
	EXISTS (SELECT * FROM sample552 WHERE sample552.no2 = sample551.no);

IN

스칼라 값끼리 비교할 때는 = 연산자를 사용한다. 다만 집합을 비교할 때는 사용할 수 없다. 
IN을 사용하면 집합 안의 값이 존재하는 지를 조사할 수 있다.

sample552에는 3과 5라는 값이 존재한다. 
서브쿼리를 사용하지 않고 WHERE 구로 간단하게 처리한다면 다음과 같이 조건을 붙일 수 있다.

WHERE no = 3 OR no = 5;

SYNTAX IN
열명 IN(집합)

IN에서는 오른쪽에 집합을 지정한다. 왼쪽에 지정된 값과 같은 값이 집합 안에 존재하면 참을 반환한다. 
집합은 상수 리스트를 괄호로 묶어 기술한다. 
앞의 WHERE 조건식을 IN을 사용하도록 수정하면 다음과 같다.

IN을 사용해 조건식 기술
SELECT * FROM sample551 WHERE no IN (3, 5);

한편, 집합 부분은 서브쿼리로도 지정할 수 있다.

SELECT * FROM sample551 WHERE no IN (SELECT no2 FROM sample552);
이 같은 경우 서브쿼리는 스칼라 서브쿼리가 될 필요는 없다. IN에는 집합을 지정할 수 있기 때문이다.

IN은 집합 안에 값이 포함되어 있으면 참이 된다. 
반면 NOT IN으로 지정하면 집합에 값이 포함되어 있지 않을 경우 참이 된다.

- IN과 NULL
집계함수에서는 집합 안의 NULL 값을 무시하고 처리했다. 
IN에서는 집합안에 NULL 값이 있어도 무시하지는 않는다. 
다만 NULL = NULL을 제대로 계산할 수 없으므로 IN을 사용해도 NULL 값은 비교할 수 없다. 
즉, NULL을 비교할 때는 IS NULL을 사용해야 한다. 
또한 NOT IN의 경우, 집합 안에 NULL 값이 있으면 
설령 왼쪽 값이 집합 안에 포함되어 있지 않아도 참을 반환하지 않는다. 
그 결과는 '불명(UNKNOWN)'이 된다.

MySQL에서 집합에 NULL이 포함되어 있는 경우, 
조건식 IN은 왼쪽 값이 집합에 포함되어 있으면 참을, 
그렇지 않으면 NULL을 반환한다. NOT IN은 왼쪽 값이 집합에 포함되어 있으면 거짓을, 
그렇지 않으면 NULL을 반환한다. 
결국 NOT IN의 경우 집합에 NULL이 포함되어 있다면 그 결괏값은 0건이 된다. 
NULL을 반환한다는 것은 비교할 수 없다는 것을 의미한다. 
왼쪽의 값이 NULL인 경우에도 오른쪽의 값과 관계없이 비교할 수 없으므로, 
조건식은 참 또는 거짓이 아닌 NULL을 반환한다.

EX)
SELECT * FROM SAMPLE551 WHERE NO IN(3, 5, NULL);
SELECT * FROM SAMPLE551 WHERE NO NOT IN(3, 5, NULL);
SELECT * FROM SAMPLE551 WHERE NO NOT IN(3, 5);

문제 1
테이블의 행 개수를 알고 싶을 때 사용하는 집계함수는 무엇인가?
① COUNT
② SUM
③ MAX

답 : ① COUNT 
COUNT는 행의 개수를 구하는 집약함수이다. SUM은 합계를, MAX는 최대값을 구하는 집약함수이다.

문제2
SELECT 명령에 GROUP BY를 지정한 경우 데이터베이스 내부에서 수행되는 처리는 무엇인가?
① 정렬
② 그룹화
③ 최적화

답 : ② 그룹화
GROUP BY 구에서는 그룹화 방법을 지정한다. 데이터베이스 내부에서 그룹화가 행해진다.

문제3
SELECT 구에서 지정할 수 있는 서브쿼리는 무엇인가?
① 스칼라 서브쿼리
② 상관 서브쿼리
③ 서브쿼리를 지정할 수 없다.

답 : ① 스칼라 서브쿼리
SELECT 구에는 하나의 값을 반환하는 스칼라 서브쿼리를 지정할 수 있다.

참고:

EXISTS
: 조건에 해당하는 ROW의 존재 유무와 체크 후 더 이상 수행하지 않는다.  
  퍼포먼스는 EXISTS가 더 좋다!
IN 
 : 조건에 해당하는 ROW의 칼럼을 비교하여 체크한다. 
   SELECT 절에서 조회한 칼럼 값으로 비교하므로 EXISTS에 비해 성능이 떨어진다.