CREATE TABLE로 테이블을 정의할 경우, 열 이외에 제약도 정의할 수 있다.
테이블에 제약을 설정함으로써 저장될 데이터를 제한할 수 있다. 
예를 들어 NOT NULL 제약은 NULL 값이 저장되지 않도록 제한한다. 
NOT NULL 제약 외에도 기본키(Primary Key) 제약이나 
외부참조(정합) 제약(복수의 테이블 사이에서 정합성을 유지하기 위해 설정하는 것으로 
테이블 간에는 부모 자식과 같은 관계를 가지며 정합성을 유지한다. 
자식 테이블 측에서는 외부키(FOREIGN KEY)를 지정해 부모 테이블을 참조한다. 
부모 테이블에서 참조될 열은 반드시 유일성(UNIQUE KEY, PRIMARY KEY)을 가진다.)등이 있다.

* 데이터 정합성 : 어떤 데이터들이 값이 서로 일치함.
	정합성은 데이터가 서로 모순 없이 일관되게 일치해야 함을 의미
(ch: 무결성 : 데이터가 정확하고 완전해야 함을 의미)

1. 테이블 작성시 제약 정의
제약은 테이블에 설정하는 것이다. 
CREATE TABLE로 테이블을 작성할 때 제약을 같이 정의한다. 
물론 ALTER TABLE로 제약을 지정하거나 변경할 수 있다. 
이때 NOT NULL 제약 등 하나의 열에 대해 설정하는 제약은 열을 정의할 때 지정한다.

#UNIQUE : 중복 허용x, null 허용

테이블 열에 제약 정의하기

CREATE TABLE sample631(
a INTEGER NOT NULL,
#b INTEGER NOT NULL,
b INTEGER NOT NULL UNIQUE,		# PRIMARY KEY로 지정한게 없을 시 PRIMARY KEY가 된다	
c VARCHAR(30)
);

DESC sample631;

a 열에는 NOT NULL 제약이 걸려있다. b 열에는 NOT NULL 제약과 UNIQUE 제약이 걸려있다. 
이처럼 열에 대해 정의하는 제약을 '열 제약'이라 부른다. 
'복수열에 의한 기본키 제약'처럼 한 개의 제약으로 
복수의 열에 제약을 설정하는 경우를 '테이블 제약'이라 부른다.

PRIMARY KEY # 중복 허용x, null 허용x
유일한 레코드를 만들려면 다른 컬럼과 구별하고자 특별한 속성을 설정해야 한다.
이럴 때 사용하는 것이 기본 키 PRIMARY KEY이다.

기본 키는 다음과 같은 특징을 갖는다.
- 값이 중복되지 않는다.
- 반드시 값을 입력해야 한다.
- 테이블 데이터의 고유 인식번호(ID)

UNIQUE KEY(고유 키)

고유 키는 다음과 같은 특징을 갖는다.
- 값이 중복되지 않는다.
- 값을 입력하지 않아도 된다.
- 중복되면 안되는 테이터(주민등록번호, 군번 등)

테이블에 '테이블 제약' 정의하기

CREATE TABLE sample632(
no INTEGER NOT NULL,
sub_no INTEGER NOT NULL,
name VARCHAR(30),
PRIMARY KEY(no, sub_no)
);
DESC sample632;
제약 추가
기존 테이블에도 나중에 제약을 추가할 수 있다. 
이때 열 제약과 테이블 제약은 조금 다른 방법으로 추가한다.

- 열 제약 추가
열 제약을 추가할 경우 ALTER TABLE로 열 정의를 변경할 수 있다. 
기존 테이블을 변경할 경우에는 제약을 위반하는 데이터가 있는지 먼저 검사한다. 
만약 c 열에 NULL 값이 존재한다면 ALTER TABLE 명령은 에러가 발생한다. 
다음은 c 열에 NOT NULL 제약을 설정하는 예이다.

열 제약 추가하기

c열에 NOT NULL 제약 걸기
ALTER TABLE sample631 MODIFY c VARCHAR(30) NOT NULL;
DESC sample631;

테이블 제약 추가하기
기본키는 테이블에 하나만  설정할 수 있다. 
이미 기본키가 설정되어 있는 테이블에 추가로 기본키를 작성할 수는 없다. 
또, 열 제약을 추가할 때와 마찬가지로 기존의 행을 검사해 
추가할 제약을 위반하는 데이터가 있으면 에러가 발생한다.

ALTER TABLE sample631 ADD CONSTRAINT PRIMARY KEY(a);
DESC sample631;

열 제약 삭제하기
c열의 NOT NULL 제약 없애기
ALTER TABLE sample631 MODIFY c VARCHAR(30);
DESC sample631;

한편 테이블 제약은 ALTER TABLE의 DROP 하부명령으로 삭제할 수 있다. 

제약키 조회
SELECT constraint_name, constraint_type FROM information_schema.table_constraints
 WHERE table_name = 'sample631';

테이블 제약 삭제하기
기본키 제약 삭제하기
ALTER TABLE sample631 DROP PRIMARY KEY;
DESC sample631;

기본키
CREATE TABLE sample634(
p INTEGER NOT NULL,
a VARCHAR(30),
PRIMARY KEY(p)
);

열 p가 sample634 테이블의 기본키이다. 
덧붙이자면 기본키로 지정할 열은 NOT NULL 제약이 설정되어 있어야 한다.
(mysql8.0기준 테이블 생성시 NOT NULL 제약이 설정되어 있지 않아도 된다.)
기본키는 테이블의 행 한 개를 특정할 수 있는 검색키이다. 
기본키 제약이 설정된 테이블에서는 기본키로 검색했을 때 
복수의 행이 일치하는 데이터를 작성할 수 없다. 간단히 말하면, 
기본키로 설정된 열이 중복하는 데이터 값을 가지면 제약이 위반된다.

INSERT INTO sample634 VALUES(1, '첫째줄');
INSERT INTO sample634 VALUES(2, '둘째줄');
INSERT INTO sample634 VALUES(3, '셋째줄');

sample634에 중복되는 행 추가하기
INSERT INTO sample634 VALUES(2, '넷째행');	# ERROR
#primary key인데 2값이 중복되므로 에러

sample634를 중복된 값으로 갱신하기
UPDATE sample634 SET p=2 WHERE p=3;	# ERROR
# 2값이 있는데 2를 넣으려 하므로 에러

이처럼 열을 기본키로 지정해 유일한 값을 가지도록 하는 구조가 바로 기본키 제약이다. 
행이 유일성을 필요로 한다는 다른 의미에서 '유일성 제약'이라 불리는 경우도 있다.

기본키 제약이 설정된 열에는 중복된 값을 저장할 수 없다!

- 복수의 열로 기본키 지정하기

CREATE TABLE sample635(
a int,
b int,
CONSTRAINT PRIMARY KEY(a, b)
);
DESC sample635;
INSERT INTO sample635 values(1, 1);
INSERT INTO sample635 values(1, 2);
INSERT INTO sample635 values(1, 3);
INSERT INTO sample635 values(2, 1);
INSERT INTO sample635 values(2, 2);

기본 키를 구성하는 열은 복수라도 상관없다. 
복수의 열을 기본키로 지정했을 경우, 키를 구성하는 모든 열을 사용해서 
중복하는 값이 있는지 없는지를 검사한다.

예를 들어 a열과 b열로 기본키를 지정했을 경우를 생각해보자. 
다음과 같이 a열만을 봤을 때는 중복하는 값이 있지만, 
b열이 다르면 키 전체로서는 중복하지 않는다고 간주되기 때문에 
기본키 제약에 위반되지 않는다. 만약 이 상태에서 키가 완전히 동일한 데이터값으로 
INSERT 명령을 실행하면 기본키 제약에 위반된다.
INSERT INTO sample635 values(1, 3);	# 중복된 데이터 에러
SELECT a, b FROM sample635;



