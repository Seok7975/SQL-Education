수치연산
SELECT 구로 연산하기

CREATE TABLE sample34(no int, price int, quantity int); # 만듬
INSERT INTO SAMPLE34 VALUES(1, 100, 10);
INSERT INTO SAMPLE34 VALUES(2, 230, 24);
INSERT INTO SAMPLE34 VALUES(3, 1980, 1);

SELECT 구에서 식에 별명 붙이기
price * quantity 식에 amount라는 별명 붙이기
SELECT *, price * quantity AS amount FROM sample34;
# sample34테이블에서 모든 열을 선택하고, price와 quantity 열의 값을 곱해 amount열에 저장

키워드 AS는 생략할 수 있다.'SELECT price * quantity amount'라고 써도 무방하다. 
에일리어스(alias)라고도 불리는 별명은 영어, 숫자, 한글 등으로 지정할 수 있다. 
단, 별명을 한글로 지정하는 경우에는 여러 가지로 오작동하는 경우가 많으므로
더블쿼트로 둘러싸서 지정한다. 이 룰은 데이터베이스 객체의 이름에 
ASCII 문자 이외의 것을 사용할 경우에 해당한다.

SELECT price * quantity "금액" FROM sample34; 
# sample34에서 price*quantity를 해 새로운 열을 생성 이 열의 이름은 "금액"

SELECT price * quantity AS SELECT FROM sample34;	# 예약어로는 이름을 줄수 없다. 에러
SELECT price * quantity AS "SELECT" FROM sample34;	
# "SELECT" 문자열을 사용해 이름 주기 가능, 단 툴과 버전에 따라 가능 하기도 하고 안되기도 함.

#예약어
#SELECT, FROM, WHERE, ORDER BY, GROUP BY

이름에 ASCII 문자 이외의 것을 포함할 경우는 더블쿼트로 둘러싸서 지정한다!

WHERE 구에서 금액을 계산하고 2000원 이상인 행 검색하기
SELECT *, price * quantity AS amount FROM sample34 WHERE price * quantity >= 2000;

여기에서 price * quantity를 계산할 때 SELECT 구에서 
amount라는 별명을 붙였으므로 WHERE 구에도 amount로 지정하면 되지 않을까 생각될 수도 있다. 
하지만 실제로 다음과 같은 SELECT 명령을 실행해 보면 
amount라는 열은 존재하지 않는다는 에러가 발생한다. 

SELECT *, price * quantity AS amount FROM sample34 WHERE amount >= 2000;

- WHERE 구와 SELECT 구의 내부처리 순서
WHERE 구에서의 행 선택, SELECT 구에서의 열 선택은 데이터베이스 서버 내부에서 
WHERE 구 -> SELECT 구의 순서로 처리된다.

표준 SQL에는 내부처리 순서가 따로 정해져 있지 않다. 
하지만 WHERE구 -> SELECT 구의 순서로 내부 처리를 하는 데이터 베이스가 많다. 
따라서 WHERE 구로 행이 조건에 일치하는지 아닌지를 먼저 조사한 후에 
SELECT 구에 지정된 열을 선택해 결과로 반환하는 식으로 처리한다.

별명은 SELECT 구문을 내부 처리할 때 비로서 붙여진다. 
즉, WHERE 구의 처리는 SELECT 구보다 선행되므로 WHERE 구에서 사용한 별칭은 
아직 내부적으로 지정되지 않은 상태가 되어 에러가 발생하는 것이다.

SELECT 구에서 지정한 별명은 WHERE 구 안에서 사용할 수 없다!

NULL 값의 연산

다음 연산결과는 모두 NULL 이다.

* NULL + 1
* 1 + NULL
* 1 + 2 * NULL
* 1 / NULL

SELECT *, price * quantity AS amount FROM sample34;

ORDER BY 구에서 금액을 내림차순으로 정렬하기
SELECT *, price * quantity AS amount FROM sample34 ORDER BY price * quantity DESC;

금액의 별명을 사용해 내림차순으로 정렬하기
SELECT *, price * quantity AS amount FROM sample34;

ORDER BY구에서 별명을 사용해 정렬하기
SELECT *, price * quantity AS amount FROM sample34 ORDER BY amount DESC;

이처럼 SELECT 구에서 지정한 별명을 마치 그런 열이 존재하는 것처럼 
ORDER BY 구에서 사용할 수 있다. 한편, WHERE 구에서는 별명을 사용할 수 없다. 
서버에서 내부처리가 다음과 같은 순으로 처리되기 때문이다.

WHERE 구 -> SELECT 구 -> ORDER BY 구

ORDER BY 구에서는 SELECT 구에서 지정한 별명을 사용할 수 있다!

SELECT 10%3;
SELECT MOD(10, 3);	// 1 

#만듬
CREATE TABLE sample341(amount decimal(7, 2));	//(전체자릿수, 소숫점자릿수)
INSERT INTO sample341 VALUES(5961.60);
INSERT INTO sample341 VALUES(2138.40);
INSERT INTO sample341 VALUES(1080.00);
----------------------
문법
DECIMAL(M,D)
M은 소수 부분을 포함한 실수의 총 자릿수를 나타내며, 최댓값은 65입니다.
D는 소수 부분의 자릿수를 나타내며, D가 0이면 소수 부분을 가지지 않습니다.

ROUND 반올림
SELECT amount, ROUND(amount) FROM sample341;

ROUND 함수의 두 번째 인수를 지정해, 소수점 둘째 자리를 반올림
SELECT amount, ROUND(amount, 1) FROM sample341;	//소숫점 첫째자리까지 반올림하여 출력

ROUND 함수의 두 번째 인수를 지정해 10단위를 반올림
SELECT amount, ROUND(amount, -2) FROM sample341;	//10의자리에서 반올림하여 출력

문자열 결합 연산자

연산자/함수	연산		데이터베이스
+		문자열 결합	SQL Server
||		문자열 결합	Oracle, DB2, PostgreSQL
CONCAT		문자열 결합	MySQL

CREATE TABLE sample35(no int, price int, quantity int, unit char(10));
INSERT INTO sample35 VALUES(1, 100, 10, '개');
INSERT INTO sample35 VALUES(2, 230, 24, '캔');
INSERT INTO sample35 VALUES(3, 1980, 1, '장');

문자열 결합으로 단위를 연결해 결과 얻기
SELECT CONCAT(quantity, unit) FROM sample35;	//10개, 24캔, 1장
공백추가
SELECT CONCAT(quantity,' ', unit) FROM sample35;	//10 개, 24 캔, 1 장

앞 4자리(년) 추출
SELECT SUBSTRING('20140125001', 1, 4);		# 2014

5째 자리부터 2자리(월) 추출
SELECT SUBSTRING('20140125001', 5, 2);		# 01

TRIM 함수
TRIM 함수는 문자열의 앞뒤로 여분의 스페이스가 있을 경우 
이를 제거해주는 함수로 문자열 도중에 존재하는 스페이스는 제거되지 않는다. 
고정길이 문자열형에 대해 많이 사용하는 함수이다.

SELECT LENGTH('  ABC     ');
SELECT LENGTH(TRIM('  ABC     '));