- 시스템 날짜

'시스템 날짜'란 하드웨어 상의 시계로부터 실시간으로 얻을 수 있는 일시적인 데이터를 말한다. RDBMS에서도 시스템 날짜와 시간을 확인하는 함수를 제공한다.

표준 SQL에서는 'CURRENT_TIMESTAMP'라는 긴 이름의 함수로 실행했을 때를 기준으로 시간을 표시한다. CURRENT_TIMESTAMP는 함수임에도 인수를 필요로 하지 않는다. 일반적인 함수와는 달리 인수를 지정할 필요가 없으므로 괄호를 사용하지 않는 특수한 함수이다.

CURRENT_TIMESTAMP로 시스템 날짜 확인
SELECT CURRENT_TIMESTAMP;

앞의 예에서는 FROM 구를 생략했다. SELECT 구만으로도 SELECT 명령은 실행된다. 하지만 Oracle과 같은 전통적인 데이터베이스에서는 FROM구를 생략할 수 없다.

이미 언급했듯이 CURRENT_TIMESTAMP는 표준 SQL로 규정되어 있는 함수이다. Oracle에서는 SYSDATE 함수, SQL Server에서는 GETDATE 함수를 사용해도 시스템 날짜를 확인할 수 있다. 그러나 이들은 표준화되기 전에 구현된 함수인 만큼 사용하지 않는 편이 낫다.

MySQL
날짜를 문자열로 변환할 때는 DATE FORMAT(날짜, 출력 형식)을 사용
SELECT now();
SELECT DATE_FORMAT(now(), '%Y/%M/%D');
SELECT DATE_FORMAT(now(), '%Y/%m/%D');

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(참고)
now()                  timestamp with time zone Current date and time (start of current transaction); see Section 9.9.4
current_timestamp timestamp with time zone Current date and time (start of current transaction); see Section 9.9.4
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



문자열을 날짜로 변환할 때는 STR_TO_DATE(문자, 출력 형식) 함수를 사용한다.
SELECT STR_TO_DATE('2008-01-01', '%Y-%m-%D');

날짜 시간형 데이터는 기간형 수치데이터와 덧셈 및 뺄셈을 할 수 있다. 
날짜 시간형 데이터에 기간형 수치데이터를 더하거나 빼면 날짜시간형 데이터가 반환된다. 
예를 들어 특정일로부터 1일 후를 계산하고 싶다면 a + 1 DAY 라는 식으로 계산할 수 있다. 
1일 전이라면 a- 1 DAY로 하면 된다.

CURRENT_DATE는 시스템 날짜의 날짜만 확인하는 함수. 
INTERVAL 1 DAY는 '1일 후'라는 의미의 기간형 상수이다. 
기간형 상수의 기술방법은 데이터베이스마다 조금씩 다르며 세세한 부분까지 
표준화가 이루어지지 않았다.

날짜형 간의 뺄셈
날짜시간형 데이터 간에 뺄셈을 할 수 있다. 
예를 들면 Oracle에서는 '2014-02-28' - '2014-01-01'이라고 한다면 
두 날짜 사이에 차이가 얼마나 발생했는지 계산할 수 있다. 
한편 MySQL에서는 DATEDIFF('2014-02-28', '2014-01-01')로 계산할 수 있다.
SELECT DATEDIFF('2014-02-28', '2014-01-01');

시스템 날짜의 1일 후를 계산하기
날짜를 연산해 시스템 날짜의 1일 후를 검색
SELECT CURRENT_DATE + INTERVAL 1 DAY;

날짜 및 시간 처리
날짜 및 시간 관련 칼럼 타입
(1) DATE 
날짜 타입이다. '1000-01-01'에서 '9999-12-31' 까지 나타낼 수 있다. 
기본적으로 지원하는 형태는 'YYYY-MM-DD' 이다.
(2) DATETIME
날짜와 시간이 합쳐진 타입이다. 
'1000-01-01 00:00:00'에서 '9999-12-31 23:59:59'까지 나타낼 수 있다. 
기본적으로 지원하는 형태는 'YYYY-MM-DD HH:MM:SS'이다.
(3) TIMESTAMP[(M)]
날짜 및 시간 타입이다. '1970-01-01 00:00:00'에서 2037년까지 나타낸다. 
[(M)]자리에는 정밀도. 0~6을 쓸 수 있음. 
숫자를 쓰지 않으면 기본적으로 0. TIMESTAMP의 특징은 자동 변경 칼럼 타입이라는 것이다. 
INSERT나 UPDATE문을 사용할 때 매우 유용하다.
SELECT TIMESTAMP('2020-09-15');

예)
create table sample111(
	a int auto_increment primary key, 
	b timestamp default current_timestamp on update current_timestamp,  # 업데이트 수정시간으로 변경
	c varchar(20)
);
insert into sample111(c) values('haha');   
select * from sample111;   
update sample111 set c='hoho';   
select * from sample111;   

(4) TIME
시간 타입이다. '-838:59:59'에서 '838:59:59'까지 나타낼 수 있다. 
기본적으로 지원하는 형태는 'HH:MM:SS'이다.
(5) YEAR[(2/4)]
연도를 나타내는 타입이다. 
2자리 혹은 4자리로 나타낼 수 있으며 자리수를 지정하지 않으면 기본적으로 4자리로 나타낸다. 
4자리로 사용할 때는 1901년에서 2155년까지 지원하며 
2자리로 사용할 때는 1970년에서 2069년까지 지원한다.

날짜 및 시간 관련 함수

[실습 따라하기]
1) NOW() 또는 SYSDATE() : 현재 날짜와 시간을 반환한다.
select sysdate(), now();

2) curdate() 또는 current_date() : 현재 날짜를 반환한다.
select curdate(), current_date();

3) curtime() 또는 current_time() : 현재 시간을 반환한다.
select curtime(), current_time();

4) dayofmonth(date) : 몇일인지를 리턴 한다.
select now();
select dayofmonth(now());

5) dayofweek(date)(1-일요일, 2-월요일...7-토요일) / weekday(date)
 : 숫자로 요일을 리턴 한다.(0 = Monday, 1 = Tuesday,..... 6 = Sunday)
표준을 따르는 dayofweek을 쓸 것
select dayofmonth(now()), dayofweek(now());

참고. DAYNAME 함수
이 함수는 DAYOFWEEK 와는 반대로 요일의 이름을 반환하는 함수입니다.
SELECT DAYNAME(now());

6) DAYOFYEAR(date) : 1년 중 며칠이 지났는가를 리턴 한다.
select dayofyear(now());

7) date_add와 date_sub

date_add 함수는 날짜에서 기준값만큼 더한 값이고 
date_sub 함수는 날짜에서 기준값 만큼 뺀값을 나타낸다.
(기준값 : YEAR, MONTH, DAY, HOUR, MINUTE, SECOND)

[실습 따라하기]

select date_add(now(), interval 3 day), date_sub(now(), interval 3 day);
첫 번째는 현재의 날짜(예를 들어 오늘이 2007-08-01 이라면)에서 3일후를 나타내며 
두 번째는 현재의 날짜에서 3일 전을 나타낸다.

8) year, month
year함수는 날짜의 연도를 출력하며 month는 날짜의 월을 출력한다.

[실습 따라하기]
select year(now()), month(now());

9) date_format(날짜, '형식') : 날짜를 형식에 맞게 출력

DATE 타입	구분기호	설명					구분기호	설명
년도		%Y		4자리 년도			%y		2자리 년도
월		%M		긴 월 이름(January ...)		%m		숫자의 월(01 ... 12)
		%b		짧은 월 이름(Jan ...)			%c		숫자의 월(1 ... 12)
요일		%W		긴 요일 이름(Sunday ...)		%a		짧은 요일 이름(Sun ...)
일		%D		월 내에서 서수 형식의 일(1th...)	%d		월 내의 일자(01 ... 31)
		%w		숫자의 요일(0=Sunday ...)		%e		월 내의 일자(1 ... 31)
								%j		일년 중의 날수 (001 ... 336)
시		%I		12시간제의 시(1 ... 12)		%k		12시간제의 시 (0...23)
		%h		12시간제의 시(01 ... 12)		%H		12시간제의 시 (00 ... 23)
		%l		12시간제의 시(01 ... 12)
분		%i		숫자의 분(00 ... 59)
초		%S		숫자의 초(00 ... 59)			%s		숫자의 초 (00 ... 59)
시간		%r		12시간제의 시간(hh:mm:ss AM 또는 PM)	%T		24시간제의 시간(hh:mm:ss)
주		%U		일요일을 기준으로 한 주(0 ... 53)	%u		일요일을 기준으로 한 주(0 ... 53)
기타		%%		문자 '%'				%p		AM 또는 PM

[예제 6-10] 교수테이블에서 교수코드, 교수이름, 임용일자를 년도(4자리), 월(영문), 일(0이 포함된 날짜) 형식으로 출력하라.
(haksa_database)
use haksa_database;
select prof_code, prof_name, date_format(create_date, '%Y %M %d') from professor;
참고 select prof_code, prof_name, create_date from professor;




