MySQL Workebench를 실행해서, File - Open SQL Script 메뉴를 선택하고 market_db.sql을 선택한 후 [열기] 버튼을 클릭한다.
Execute the selected portion of the script or everything. 아이콘을 클릭해서 SQL을 실행한다.

DROP DATABASE IF EXISTS market_db;

SQL에서 하이픈(-) 2개가 연속되면, 그 이후는 주석(remark)으로 취급한다. 즉, 코드의 설명으로 처리되어 없는 것과 마찬가지이다. 주의할 점은 하이픈 2개 이후에 한 칸을 띄고 설명을 작성해야 한다.

원래 테이블의 전체 이름은 데이터베이스_이름.테이블_이름 형식으로 표현한다. '인터넷 마켓 DB 구성도'를 예로 든다면 이 테이블의 전체 이름은 market_db.member 이다. 그렇기 때문에 원칙적으로는 다음과 같이 사용해야 한다.

SELECT * FROM market_db.member;

하지만 데이터베이스 이름을 생략하면 USE 문으로 지정해 놓은 데이터베이스가 자동으로 선택된다. 현재 선택된 데이터베이스가 market_db이므로 다음 두 쿼리는 동일한 것이 된다.

SELECT * FROM market_db.member;
SELECT * FROM member;

회원(MEMBER)테이블에서 주소(addr)을 별칭 주소, 데뷔 날짜(debut_date)를 별칭 "데뷔 일자", 이름(mem_name)을 출력한다.
SELECT addr 주소, debut_date "데뷔 일자", mem_name FROM member;

회원(member)테이블에서 회원이름이 '블랙핑크'인 것의 모든 열을 출력한다.
SELECT * FROM MEMBER WHERE MEM_NAME = '블랙핑크';

회원(MEMBER)테이블에서 인원(MEM_NUMBER)가 4인 것의 모든 열을 출력한다.
SELECT * FROM MEMBER WHERE MEM_NUMBER = 4;

회원(MEMBER)테이블에서 회원 키가(HEIGHT) 162이하인 것의 아이디(MEM_ID), 이름(MEM_NAME)을 출력하시오.
SELECT MEM_ID, MEM_NAME FROM MEMBER WHERE HEIGHT <= 162;

회원(MEMBER)테이블에서 키(HEIGHT)가 165이상이고 멤버 수(MEM_NUMBER)가 6초과인것의 
이름(MEM_NAME), 키(HEIGHT), 멤버 수(MEM_NUMBER)를 조회하시오.
SELECT mem_name, height, mem_number from member WHERE height >= 165 AND mem_number > 6;

회원(MEMBER)테이블에서 키(HEIGHT)가 165이상이거나 멤버 수(MEM_NUMBER)가 6초과인것의 
이름(MEM_NAME), 키(HEIGHT), 멤버 수(MEM_NUMBER)를 조회하시오.
SELECT mem_name, height, mem_number from member WHERE height >= 165 OR mem_number > 6;

회원 테이블(member)에서 키가 163이상 165이하인 것의 이름(mem_name), 키(height)를 출력하시오.(두 가지 방법으로)
SELECT mem_name, height FROM member WHERE height >= 163 AND height <= 165;
SELECT mem_name, height FROM member WHERE height BETWEEN 163 AND 165;

member 테이블에서 addr이 '경기' 이거나 '전남'이거나 '경남' 인것의 mem_name, addr을 보여주시오.(두 가지 방법으로)
SELECT mem_name, addr FROM member WHERE addr = '경기' OR addr = '전남' OR addr = '경남';

IN()을 사용하면 코드를 훨씬 간결하게 작성할 수 있다. 다음은 바로 앞의 SQL과 동일한 결과를 낸다.
SELECT mem_name, addr FROM member WHERE addr IN('경기', '전남', '경남');

회원 테이블(member)에서 이름(mem_name)이 '우'로 시작하는 것의 모든 열을 조회하시오.
SELECT * FROM member WHERE mem_name LIKE '우%';

회원 테이블(member)에서 이름(mem_name)이 4글자 이고 끝에 두 글자는 '핑크'로 끝나는 것의 모든 열을 조회하시오.
SELECT * FROM member WHERE mem_name LIKE '__핑크';

서브 쿼리
SELECT 안에는 또 다른 SELECT가 들어갈 수 있습니다. 이것을 서브 쿼리(subquery) 또는 하위 쿼리라고 부릅니다.

회원(member) 테이블에서 이름(mem_name)이 '에이핑크'인 회원의 키(height)보다 큰 회원의 이름(mem_name)과 키(height)를 출력하시오.
SELECT mem_name, height FROM member WHERE height > (SELECT height FROM member WHERE mem_name = '에이핑크');

회원(member) 테이블에서 아이디(mem_id), 이름(mem_name), 데뷔 날짜(debut_date)를 데뷔 날짜 순으로 정렬하여 출력하시오.
SELECT mem_id, mem_name, debut_date FROM member ORDER BY debut_date;

회원(member) 테이블에서 아이디(mem_id), 이름(mem_name), 데뷔 날짜(debut_date)를 데뷔 날짜 내림차순으로 정렬하여 출력하시오.
SELECT mem_id, mem_name, debut_date FROM member ORDER BY debut_date desc;

회원(member) 테이블에서 키가 164이상인 회원의 아이디(mem_id), 이름(mem_name), 데뷔날짜(debut_date), 키(height)를 키 내림차순으로 조회하시오.
SELECT mem_id, mem_name, debut_date, height FROM member WHERE height >= 164 ORDER BY height DESC;

회원(member) 테이블에서 키가 164이상인 회원의 아이디(mem_id), 이름(mem_name), 데뷔날짜(debut_date), 키(height)를 키 내림차순, 데뷔날짜 오름차순으로 정렬하여 출력하시오.
SELECT mem_id, mem_name, debut_date, height FROM member WHERE height >= 164 ORDER BY height DESC, debut_date ASC;

출력의 개수를 제한 : LIMIT

LIMIT는 출력하는 개수를 제한한다. 

회원(member) 테이블에 상위 3개를 조회한다.
SELECT * FROM MEMBER LIMIT 3;

회원 테이블(member)에서 데뷔날짜가 빠른 회원의 이름(mem_name), 데뷔 날짜(debut_date)를 데뷔순으로 3건을 출력하자.
SELECT mem_name, debut_date FROM member ORDER BY debut_date LIMIT 3;

(LIMIT 형식은 LIMIT 시작, 개수이다. 지금과 같이 LIMIT 3만 쓰면 LIMIT 0, 3과 동일하다. 즉, 0번째부터 3건이라는 의미이다.)
참고 :
LIMIT 시작, 개수는 LIMIT 개수 OFFSET 시작이라고 쓰는 것과 동일하다. 또한 LIMIT는 첫 데이터를 0번으로 설정하고 시작한다.

회원(member)테이블에서 이름(mem_name), 키(height) 키로 내림차순 정렬해서 3번째 2개를 가져와서 출력하자.
SELECT mem_name, height FROM member ORDER BY height DESC LIMIT 3, 2;

중복된 결과를 제거 : DISTINCT

회원(member)테이블로 부터 중복된 값을 제외하고 주소를 출력하자.

SELECT DISTINCT addr FROM member;

회원(member)테이블로부터 주소(addr)를 주소 오름차순으로 출력하자.
SELECT addr FROM member ORDER BY addr;

구매(buy) 테이블로 부터 회원 아이디( mem_id), 개수 (amount) 를  회원 아이디(mem_id) 오름차순으로 정렬하자.
SELECT mem_id, amount FROM buy ORDER BY mem_id;

집계 함수(aggregate function)
GROUP BY와 함께 주로 사용되는 집계 함수

SUM()		합계를 구한다.
AVG()		평균을 구한다.
MIN()		최소값을 구한다.
MAX()		최대값을 구한다.
COUNT()		행의 개수를 센다.
COUNT(DISTINCT)	행의 개수를 센다(중복은 1개만 인정)


구매(buy)테이블에서 아이디(mem_id)별로 그룹화하여 아이디(mem_id) (별칭 "회원 아이디") 와 개수(amount)를 합친 것을 (별칭 "총 구매 개수")  출력하자.
SELECT mem_id "회원 아이디", SUM(amount) "총 구매 개수" FROM buy GROUP BY mem_id;

구매(buy)테이블에서 아이디(mem_id)별로 그룹화하여 아이디(mem_id) (별칭 "회원 아이디") 와 총 구매 금액(price*amount)을  출력하자.
SELECT mem_id "회원 아이디", SUM(price*amount) "총 구매 금액" FROM buy GROUP BY mem_id;

구매(buy) 테이블의 물품 개수(amount)의 평균(별칭 평균 구매 개수)을 출력하자.
SELECT AVG(amount) "평균 구매 개수" FROM buy;

구매 테이블(buy)로 부터 회원 아이디별(mem_id) 평균 구매 개수(amount)를 출력하자.
SELECT mem_id, AVG(amount) "평균 구매 개수" FROM buy GROUP BY mem_id;

회원(member)테이블로 부터 전체 회원의 수를 출력하자.
SELECT COUNT(*) FROM member;

회원(member)테이블로 부터 연락처가 있는 회원의 수를 출력하자.
SELECT COUNT(phone1) "연락처가 있는 회원" FROM member;

구매(buy)에서 회원 아이(mem_id)로 그룹핑 했을 때, 아이(mem_id) 별칭 "회원 아이디", 총 구매 금액(price * amount의 합계) 별치 "총 구매 금액"을 출력하시오.
SELECT mem_id "회원 아이디", SUM(price * amount) "총 구매 금액" FROM buy GROUP BY mem_id;

구매(buy)에서 회원 아이(mem_id)로 그룹핑 했을 때, 총 구매 금액(price * amount의 합계)이 1000이상인 것의 ,아이디(mem_id) 별칭 "회원 아이디", 총 구매 금액(price * amount의 합계) 별칭 "총 구매 금액"을 출력하시오.
SELECT mem_id "회원 아이디", SUM(price * amount) "총 구매 금액" FROM buy GROUP BY mem_id HAVING SUM(price*amount) > 1000;

구매(buy) 테이블에서 회원 아이디(mem_id)로 그룹핑 했을 때 총 구매 금액(price * amount)가 1000 이상인 회원의 회원 아이디(mem_id - 별칭 "회원 아이디"), 총 구매 금액(price * amount)를 출력 하는데 총 구매 금액의 내림차순으로 출력 하시오.
SELECT mem_id "회원 아이디", SUM(price*amount) "총 구매 금액" FROM buy GROUP BY mem_id HAVING SUM(price*amount) > 1000 ORDER BY SUM(price*amount) DESC;

(HAVING은 WHERE와 비슷한 개념으로 조건을 제한하는 것이지만, 집계 함수에 대해서 조건을 제한하는 것이라고 생각하면 된다. 그리고 HAVING 절은 꼭 GROUP BY 절 다음에 나와야 한다.)

데이터 입력 : INSERT

INSERT INTO 테이블 [(열1, 열2, ...)] VALUES (값1, 값2, ...)

우선 테이블 이름 다음에 나오는 열은 생략이 가능하다. 열 이름을 생략할 경우에 VALUES 다음에 나오는 값들의 순서 및 개수는 테이블을 정의할 때의 열 순서 및 개수와 동일해야 한다.

USE market_db;
테이블 hongong1 을 만든다
toy_id INT
toy_name char(4)
age int
CREATE TABLE hongong1(toy_id INT, toy_name CHAR(4), age INT);

다음 데이터를 삽입한다.
1, '우디', 25
INSERT INTO hongong1 VALUES(1, '우디', 25);

hongong1 테이블에 아이디(toy_id) 2, 이름(toy_name)에 '버즈'를 삽입하자.
INSERT INTO hongong1 (toy_id, toy_name) VALUES(2, '버즈');

hongong1 테이블에 toy_name에 '제시', age에 20, toy_id에 3을 넣자.
INSERT INTO hongong1 (toy_name, age, toy_id) VALUES('제시', 20, 3);

자동으로 증가하는 AUTO_INCREMENT
AUTO_INCREMENT는 열을 정의할 때 1부터 증가하는 값을 입력해준다. INSERT에서는 해당열이 없다고 생각하고 입력하면 된다. 단, 주의할 점은 AUTO_INCREMENT로 지정하는 열은 꼭 PRIMARY KEY로 지정해줘야 한다.

hongong2 테이블을 다음의 자료형을 가지고 만든다.
toy_id INT 자동증가
toy_name CHAR(4)
age INT

CREATE TABLE hongong2(
toy_id INT AUTO_INCREMENT PRIMARY KEY,
toy_name CHAR(4),
age INT);

자동 증가하는 부분을 NULL 값으로 채워 놓으면 1부터 차례대로 채워진다.

INSERT INTO hongong2 VALUES (NULL, '보핍', 25);
INSERT INTO hongong2 VALUES (NULL, '슬랭키', 22);
INSERT INTO hongong2 VALUES (NULL, '렉스', 21);

가장 마지막 증가값 가져오기
SELECT LAST_INSERT_ID();

hongong2 테이블 자동 증가로 입력되는 다음 값을 100부터 시작하도록 변경하기
ALTER TABLE hongong2 AUTO_INCREMENT=100;
INSERT INTO hongong2 VALUES(NULL, '재남', 35);
SELECT * FROM hongong2;

hongong3 테이블을 다음의 자료형을 가지고 만든다.
toy_id INT 자동증가
toy_name CHAR(4)
age INT

CREATE TABLE hongong3(
toy_id INT AUTO_INCREMENT PRIMARY KEY,
toy_name CHAR(4),
age INT);

hongong3 테이블 자동 증가값 1000부터 시작하기
ALTER TABLE hongong3 AUTO_INCREMENT=1000;

자동 증가값을 3씩 증가하게 하기
SET @@auto_increment_increment=3;

시스템 변수란 MySQL에서 자체적으로 가지고 있는 설정값이 저장된 변수를 말한다. 주로 MySQL의
환경과 관련된 내용이 저장되어 있으며, 그 개수는 500개 이상이다.

시스템 변수는 앞에 @@가 붙는 것이 특징이며, 시스템 변수의 값을 확인하려면
SELECT @@시스템변수를 실행하면 된다. 만약, 전체 시스템 변수의 종류를 알고 싶다면
SHOW GLOBAL VARIABLES를 실행하면 된다.

전체 시스템 변수 보기
SHOW GLOBAL VARIABLES

다음 SQL을 실행해 처음 시작되는 값과 증가값을 확인해 보자.
INSERT INTO hongong3 VALUES (NULL, '토마스', 20);
INSERT INTO hongong3 VALUES (NULL, '제임스', 23);
INSERT INTO hongong3 VALUES (NULL, '고든', 25);
SELECT * FROM hongong3;

여러 줄을 한줄로 작성
INSERT INTO 테이블_이름 VALUES (값1, 값2, ...);
INSERT INTO 테이블_이름 VALUES (값3, 값4, ...);
INSERT INTO 테이블_이름 VALUES (값5, 값6, ...);
이는 다음과 같이 1줄로 입력할 수 있다. 그 이상도 마찬가지이다.
INSERT INTO 테이블_이름 VALUES (값1, 값2, ...), (값3, 값4, ...), (값5, 값6, ...);

한번에 3행의 값을 입력하자.
NULL, '토마스', 20
NULL, '제임스', 23
NULL, '고든', 25
INSERT INTO HONGONG3 VALUES(NULL, '토마스', 20), (NULL, '제임스', 23), (NULL, '고든', 25);

다른 테이블의 데이터를 한 번에 입력하는 INSERT INTO ~ SELECT

INSERT INTO 테이블_이름 (열_이름1, 열_이름2, ...)  SELECT 문;
주의할 점은 SELECT 문의 열 개수는 INSERT할 테이블의 열 개수와 같아야 한다. 즉, SELECT의 열이 3개라면
INSERT될 테이블의 열도 3개여야 한다.

WORLD 디비의 CITY 테이블의 행수 조회
SELECT COUNT(*) FROM world.city;

city_popul 테이블을 다음의 자료형을 가지고 만들기
city_name CHAR(35)
population INT
CREATE TABLE city_popul (city_name CHAR(35), population INT);

world.city 테이블의 Name과 Population 데이터를 city_popul 테이블에 city_name과 population에 넣기
INSERT INTO city_popul SELECT Name, Population FROM world.city;

UPDATE 문의 기본 문법
UPDATE는 기존에 입력되어 있는 값을 수정하는 명령이다.
UPDATE 테이블_이름 SET 열1=값1, 열2=값2, ... WHERE 조건 ;

MySQL Workbench 설정 변경
MySQL 워크벤치에서는 기본적으로 UPDATE 및 DELETE를 허용하지 않기 때문에 UPDATE를 실행하기 전에 설정을
변경해야 한다. 먼저 기존에 열린 쿼리 창을 모두 종료한다. [Edit]-[Preferences] 메뉴를 실행하고 
Workbench Preferences 창의 [SQL Editor]에서 'Safe Updates (rejects UPDATEs and DELETs with no 
restrictions)'를 체크 해제한 후 [OK] 버튼을 클릭한다.
설정한 내용을 적용하려면 MySQL 워크벤치를 재시작해야 한다.

USE market_db;
city_popul 테이블의 도시 이름(city_name)이 'Seoul'인 것을 도시 이름(city_name)을 '서울'로 변경하자.
그리고 변경된 것을 확인하자.
UPDATE city_popul SET city_name = '서울' WHERE city_name = 'Seoul';
SELECT * FROM city_popul WHERE city_name = '서울';

city_popul 테이블에서 도시 이름(city_name)이 'New York'인 도시의 도시 이름(city_name)을 '뉴욕'
인구(population)을 0으로 바꾸자. 그리고 그 결과를 확인하자
UPDATE city_popul SET city_name = '뉴욕', population = 0 WHERE city_name = 'New York';
SELECT * FROM city_popul WHERE city_name = '뉴욕';

WHERE가 없는 UPDATE문
UPDATE는 사용법이 간단하지만 주의할 사항이 있다. UPDATE문에서 WHERE 절은 문법상 생략이
가능하지만, WHERE 절을 생략하면 테이블의 모든 행이 변경된다.

city_popul 테이블의 인구(population)을 10,000 단위로 바꾸고, 그것을 확인해 보자
UPDATE city_popul SET population = population / 10000;
SELECT * FROM city_popul LIMIT 5;

데이터 삭제 : DELETE

DELETE FROM 테이블이름 WHERE 조건;

city_popul 테이블에서 도시 이름(city_name)이 'New'로 시작하는 도시를 삭제하시오.
DELETE FROM city_popul WHERE city_name LIKE 'New%';

city_popul 테이블에서 도시 이름(city_name)이 'New'로 시작하는 도시의 상위 5건을 삭제하시오.
DELETE FROM city_popul WHERE city_name LIKE 'New%' LIMIT 5;

대용량 테이블의 삭제

world.city 테이블과 sakila.county 테이블을 cross join한 big_table1, big_table2, big_table3을
만드시오.
big_table1의 행수를 출력하시오.
CREATE TABLE big_table1(SELECT * FROM world.city, sakila.country);
CREATE TABLE big_table2(SELECT * FROM world.city, sakila.country);
CREATE TABLE big_table3(SELECT * FROM world.city, sakila.country);
SELECT COUNT(*) FROM big_table1;

big_table1을 DELETE로 삭제하기
big_table2을 DROP으로 삭제하기
big_table3을 TRUNCATE로 삭제하기
그리고 걸린 시간 비교해보기

DELETE FROM big_table1;
DROP TABLE big_table2;
TRUNCATE TABLE big_table3;

TRUNCATE는 DELETE와 달리 WHERE문을 사용할 수 없다. 그러므로 TRUNCATE는 조건 없이
전체 행을 삭제할 때만 사용된다.

대용량 테이블의 전체 내용을 삭제할 때 테이블 자체가 필요 없을 경우에는 DROP으로 삭제하고,
테이블의 구조는 남겨놓고 싶다면 TRUNCATE로 삭제하는 것이 효율적이다.

